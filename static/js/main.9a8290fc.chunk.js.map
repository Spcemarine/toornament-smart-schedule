{"version":3,"sources":["ToornamentHelper.ts","ConfigurationStep.tsx","CredentialsStep.tsx","SchedulePhaseComponent.tsx","TournamenStructure.ts","ScheduleStepper.tsx","FetchDialog.tsx","ReviewSchedule.tsx","ApplyDialog.tsx","App.tsx","index.tsx"],"names":["SchedulingMode","ToornamentHelper","apiKey","token","this","readApiKey","readToken","clientId","clientSecret","callback","request","XMLHttpRequest","open","setRequestHeader","addEventListener","event","result","JSON","parse","responseText","updateToken","access_token","expires_in","body","send","sessionStorage","getItem","expireDateString","accessToken","expireDate","removeItem","setItem","newToken","expiresIn","moment","add","toDate","stringify","Date","ressource","paginationIdentifier","viewerCall","customHeaders","maxResults","rangeWidth","tokenIsValid","Error","startsWith","minRange","maxRange","rangeStep","rangeOffset","finalResult","apiCallback","status","remainingItems","push","length","makePagedAPIGETCall","console","error","rangeMin","rangeMax","endpoint","forEach","header","name","value","regex","contentRangeHeader","getResponseHeader","contentRange","match","endIndex","Number","groups","totalItems","Math","max","statusText","NaN","tournamentId","stageId","rangedToornamentGETAPICall","makeAPIGETCall","log","matchId","date","requestBody","scheduled_datetime","format","CredentialsStep","props","handleChangeApiKey","toornamentHelper","updateApiKey","target","setState","credentialsUpdated","handleChangeClientId","handleChangeClientSecret","requestToken","getToken","state","getApiKey","classes","Grid","container","direction","TextField","label","className","textField","onChange","helperText","margin","Button","variant","color","button","onClick","Typography","hidden","React","Component","withStyles","theme","createStyles","marginTop","spacing","marginBottom","PhaseComponent","handleChangeStartDate","newPhase","phase","startDate","phaseChanged","handleChangePhaseRound","startingRoundId","handleChangePhaseGroup","groupId","handleDelete","item","alignContent","Tooltip","title","disablePast","ampm","FormControl","InputLabel","Select","inputProps","disabled","isFirst","structure","getGroups","map","group","index","MenuItem","id","key","getRounds","filter","round","Fab","size","aria-label","delButton","maxWidth","ConfigurationStep","renderMatchLengthConfig","Table","table","TableHead","TableRow","TableCell","tableHeader","align","TableBody","config","matchLengthSettings","matchLengthSetting","component","scope","numberOfGames","matchLengthMin","handleChangeMatchLength","type","isValidMatchLength","newCfg","scheduleConfigChanged","handleChangeMatchMode","schedulingMode","isInteger","onPhaseChanged","phases","splice","addPhase","newRound","find","findIndex","undefined","modes","Direct","Daily","Weekly","Monthly","SchedulePhaseComponent","paragraph","mode","utils","MomentUtils","canAddNewPhase","marginRight","marginLeft","minWidth","fontSize","fontWeight","palette","text","primary","borderBottomColor","secondary","main","borderBottomStyle","borderBottomWidth","flexShrink","TournamentStructure","rounds","matches","bracketType","roundDependencies","createDependencies","dependencyIndex","dep","roundId","precedingRoundIds","followingRoundIds","dependency","opponents","opp","sourceNodeId","s","nodeId","source","dId","depIndex","d","fId","BracketType","Bracket","roundDep","Rounds","firstRound","rDep","rId","roundIndex","getLastRounds","scheduleRound","r","p","previousRounds","getPrecedingRounds","scheduledAt","previousDates","sort","a","b","getTime","prevStart","lengthSetting","l","roundLength","FetchDialog","fetchOnUpdate","roundsFinished","matchesFinished","groupsFinished","matchIndex","bracketNodeIndex","getOrganizerGroups","results","number","getOrganizerRounds","group_id","settings","getOrganizerMatches","matchResults","round_id","getNodes","getBracketNodes","m","opponent","sourceType","source_type","source_node_id","callNext","getOrganizerMatchGames","newProps","fetchStageData","Dialog","DialogTitle","DialogContent","iconContainer","checkIcon","CircularProgress","green","width","ReviewSchedule","getGroupName","tableRows","ApplyDialog","progress","total","tournamentIdItemName","stageIdItemName","ScheduleStepper","steps","handleNext","activeStep","fetching","getOrganizerStages","stages","stage","newScheduleConfig","scheduleConfig","fetchDialogOpen","scheduleTournament","applySchedule","applyOpen","getMatches","applyTotal","applyProgress","currentIndex","scheduleNext","continueApplying","scheduleMatch","requestStatus","fetchCallback","gameLengths","n","firstRounds","getFirstRounds","handleBack","handleReset","handleChangeTournamentId","handleChangeStageId","canProceed","credentialsReady","getStepContent","step","display","List","ListItem","selected","ListItemText","hasApiKey","root","Stepper","Step","StepLabel","instructions","thickness","src","toorImg","App","fetchEverything","CssBaseline","AppBar","position","appBar","Toolbar","noWrap","content","justifyContent","menuButton","hide","flexGrow","padding","paper","overflowX","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a8290fc.chunk.js","sourcesContent":["import moment from 'moment';\r\n\r\nconst accessTokenItemName = 'tss_t_at';\r\nconst expireDateItemName = 'tss_t_ed';\r\nconst apiKeyItemName = 'tss_t_ak';\r\n\r\nexport interface ToornamentToken {\r\n    accessToken: string;\r\n    expireDate: Date;\r\n}\r\n\r\nexport default class ToornamentHelper {\r\n    private apiKey: string | null;\r\n    private token: ToornamentToken | null;\r\n\r\n    constructor() {\r\n        this.apiKey = this.readApiKey();\r\n        this.token = this.readToken();\r\n    }\r\n\r\n    public getToken(clientId: string, clientSecret: string, callback: () => void) {\r\n        if (this.apiKey == null) {\r\n            return false;\r\n        }\r\n\r\n        let request = new XMLHttpRequest();\r\n        request.open('POST', 'https://api.toornament.com/oauth/v2/token');\r\n        request.setRequestHeader('X-Api-Key', this.apiKey);\r\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n        request.addEventListener('load', (event) => {\r\n            const result = JSON.parse(request.responseText);\r\n            this.updateToken(result.access_token, result.expires_in);\r\n            callback();\r\n        });\r\n        const body = `grant_type=client_credentials&client_id=${clientId}&client_secret=${clientSecret}&scope=organizer:result`\r\n        request.send(body);\r\n    }\r\n\r\n    private readToken(): ToornamentToken | null {\r\n        const token = sessionStorage.getItem(accessTokenItemName);\r\n        if (token == null) {\r\n            return null;\r\n        }\r\n\r\n        const expireDateString = sessionStorage.getItem(expireDateItemName);\r\n        if (expireDateString == null) {\r\n            return null;\r\n        }\r\n\r\n        const expireDate: Date = JSON.parse(expireDateString);\r\n        return { accessToken: token, expireDate: expireDate };\r\n    }\r\n\r\n    private readApiKey(): string | null {\r\n        return sessionStorage.getItem(apiKeyItemName);\r\n    }\r\n\r\n    public updateApiKey(apiKey: string) {\r\n        if (apiKey == '') {\r\n            this.apiKey = null;\r\n            sessionStorage.removeItem(apiKeyItemName);\r\n            return;\r\n        }\r\n\r\n        this.apiKey = apiKey;\r\n        sessionStorage.setItem(apiKeyItemName, apiKey);\r\n    }\r\n\r\n    public hasApiKey() {\r\n        return this.apiKey != null && this.apiKey != '';\r\n    }\r\n\r\n    public getApiKey(): string | null {\r\n        return this.apiKey;\r\n    }\r\n\r\n    private updateToken(newToken: string, expiresIn: number) {\r\n        const expireMoment = moment().add(expiresIn, 'minutes');\r\n        const expireDate = expireMoment.toDate();\r\n        sessionStorage.setItem(accessTokenItemName, newToken);\r\n        sessionStorage.setItem(expireDateItemName, JSON.stringify(expireDate));\r\n        this.token = { accessToken: newToken, expireDate: expireDate }\r\n    }\r\n\r\n    public tokenIsValid(): boolean {\r\n        if (this.token == null) {\r\n            return false;\r\n        }\r\n\r\n        if (this.token.expireDate < new Date()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public rangedToornamentGETAPICall(ressource: string, paginationIdentifier: string, callback: (result: any[]) => void, viewerCall: boolean = false,\r\n        customHeaders: { name: string, value: string }[] = [], maxResults: number = -1, rangeWidth: number = 50): boolean {\r\n        if (this.apiKey == null) {\r\n            return false;\r\n        }\r\n\r\n        if (!viewerCall && !this.tokenIsValid()) {\r\n            throw new Error('Access Token invalid. Create new Token.');\r\n        }\r\n\r\n        if (!ressource.startsWith('/')) {\r\n            ressource = '/' + ressource;\r\n        }\r\n\r\n        const minRange = 0;\r\n        const maxRange = rangeWidth - 1;\r\n        const rangeStep = rangeWidth;\r\n        let rangeOffset = 0;\r\n\r\n        const finalResult: any[] = [];\r\n        const apiCallback = (result: any, status: number, remainingItems: number) => {\r\n            if (status >= 200 && status < 300) {\r\n                finalResult.push(...result);\r\n\r\n                if (remainingItems <= 0 || (result.length >= maxResults && maxResults > 0)) {\r\n                    callback(finalResult);\r\n                } else {\r\n                    rangeOffset += rangeStep;\r\n                    this.makePagedAPIGETCall(ressource, paginationIdentifier, minRange + rangeOffset, maxRange + rangeOffset, apiCallback, viewerCall, customHeaders);\r\n                }\r\n            } else {\r\n                console.error(result);\r\n            }\r\n        };\r\n        this.makePagedAPIGETCall(ressource, paginationIdentifier, minRange, maxRange, apiCallback, viewerCall, customHeaders);\r\n\r\n        return true;\r\n    }\r\n\r\n    private makePagedAPIGETCall(ressource: string, paginationIdentifier: string, rangeMin: number, rangeMax: number,\r\n        callback: (result: any, status: number, remainingItems: number) => void, viewerCall: boolean = true, customHeaders: { name: string, value: string }[] = []) {\r\n        if (this.apiKey == null) {\r\n            return false;\r\n        }\r\n\r\n        let request = new XMLHttpRequest();\r\n        const endpoint = `https://api.toornament.com/${viewerCall ? 'viewer' : 'organizer'}/v2${ressource}`;\r\n        request.open('GET', endpoint);\r\n        request.setRequestHeader('X-Api-Key', this.apiKey);\r\n\r\n        if (!viewerCall) {\r\n            if (!this.tokenIsValid()) {\r\n                throw new Error('Access Token invalid. Create new Token.');\r\n            }\r\n\r\n            request.setRequestHeader('Authorization', `Bearer ${this.token!.accessToken}`);\r\n        }\r\n\r\n        request.setRequestHeader('Range', `${paginationIdentifier}=${rangeMin}-${rangeMax}`);\r\n        customHeaders.forEach(header => request.setRequestHeader(header.name, header.value));\r\n        request.addEventListener('load', (event) => {\r\n            if (request.status >= 200 && request.status < 300) {\r\n                let remainingItems = 0;\r\n                const result = JSON.parse(request.responseText);\r\n                const regex = /.*\\s*(?<start>\\d+)-(?<end>\\d+)\\/(?<total>\\d+)/;\r\n                const contentRangeHeader = request.getResponseHeader('Content-Range');\r\n                if (contentRangeHeader != null) {\r\n                    const contentRange = contentRangeHeader.match(regex);\r\n                    if (contentRange != null && contentRange.length >= 4) {\r\n                        const endIndex = Number(contentRange.groups!['end']);\r\n                        const totalItems = Number(contentRange.groups!['total']);\r\n                        remainingItems = Math.max(remainingItems, totalItems - endIndex - 1);\r\n                    }\r\n                } else {\r\n                    remainingItems = result.length >= 50 ? 50 : 0;\r\n                }\r\n\r\n                callback(result, request.status, remainingItems);\r\n            } else {\r\n                callback(request.statusText, request.status, NaN);\r\n            }\r\n        });\r\n        request.send();\r\n    }\r\n\r\n    private makeAPIGETCall(ressource: string, callback: (result: any, status: number) => void, viewerCall: boolean = true,\r\n        customHeaders: { name: string, value: string }[] = []) {\r\n        if (this.apiKey == null) {\r\n            return false;\r\n        }\r\n\r\n        let request = new XMLHttpRequest();\r\n        const endpoint = `https://api.toornament.com/${viewerCall ? 'viewer' : 'organizer'}/v2${ressource}`;\r\n        request.open('GET', endpoint);\r\n        request.setRequestHeader('X-Api-Key', this.apiKey);\r\n\r\n        if (!viewerCall) {\r\n            if (!this.tokenIsValid()) {\r\n                throw new Error('Access Token invalid. Create new Token.');\r\n            }\r\n\r\n            request.setRequestHeader('Authorization', `Bearer ${this.token!.accessToken}`);\r\n        }\r\n\r\n        customHeaders.forEach(header => request.setRequestHeader(header.name, header.value));\r\n        request.addEventListener('load', (event) => {\r\n            if (request.status >= 200 && request.status < 300) {\r\n                const result = JSON.parse(request.responseText);\r\n                callback(result, request.status);\r\n            } else {\r\n                callback(request.statusText, request.status);\r\n            }\r\n        });\r\n        request.send();\r\n    }\r\n\r\n    public getOrganizerMatches(tournamentId: string, stageId: string, callback: (results: any[]) => void) {\r\n        let ressource = `/tournaments/${tournamentId}/matches?stage_ids=${stageId}`\r\n        this.rangedToornamentGETAPICall(ressource, 'matches', callback);\r\n    }\r\n\r\n    public getOrganizerRounds(tournamentId: string, stageId: string, callback: (result: any) => void) {\r\n        let ressource = `/tournaments/${tournamentId}/rounds?stage_ids=${stageId}`\r\n        this.rangedToornamentGETAPICall(ressource, 'rounds', callback, false);\r\n    }\r\n\r\n    public getOrganizerStages(tournamentId: string, callback: (result: any) => void) {\r\n        let ressource = `/tournaments/${tournamentId}/stages`\r\n        this.makeAPIGETCall(ressource, callback, false);\r\n    }\r\n\r\n    public getOrganizerTournament(tournamentId: string) {\r\n        let ressource = `/tournaments/${tournamentId}`\r\n        this.makeAPIGETCall(ressource, (result) => {\r\n            console.log(result);\r\n        }, false);\r\n    }\r\n\r\n    public getOrganizerMatchGames(tournamentId: string, matchId: string, callback: (result: any) => void) {\r\n        let ressource = `/tournaments/${tournamentId}/matches/${matchId}/games`\r\n        this.rangedToornamentGETAPICall(ressource, 'games', callback, false);\r\n    }\r\n\r\n    public getBracketNodes(tournamentId: string, stageId: string, callback: (result: any) => void) {\r\n        let ressource = `/tournaments/${tournamentId}/stages/${stageId}/bracket-nodes`\r\n        this.rangedToornamentGETAPICall(ressource, 'nodes', callback, true);\r\n    }\r\n\r\n    public getOrganizerGroups(tournamentId: string, stageId: string, callback: (result: any) => void) {\r\n        let ressource = `/tournaments/${tournamentId}/groups?stage_ids=${stageId}`\r\n        this.rangedToornamentGETAPICall(ressource, 'groups', callback, false);\r\n    }\r\n\r\n    public scheduleMatch(tournamentId: string, matchId: string, date: Date, callback: (result: any, requestStatus: number) => void) {\r\n        if (this.apiKey == null) {\r\n            return false;\r\n        }\r\n\r\n        const ressource = `https://api.toornament.com/organizer/v2/tournaments/${tournamentId}/matches/${matchId}`;\r\n        const requestBody = { scheduled_datetime: moment(date).format('YYYY-MM-DDTHH:mm:ssZ') } // 2015-12-31T00:00:00+00:00\r\n        let request = new XMLHttpRequest();\r\n        request.open('PATCH', ressource);\r\n        request.setRequestHeader('X-Api-Key', this.apiKey);\r\n\r\n        if (!this.tokenIsValid()) {\r\n            throw new Error('Access Token invalid. Create new Token.');\r\n        }\r\n\r\n        request.setRequestHeader('Authorization', `Bearer ${this.token!.accessToken}`);\r\n        request.addEventListener('load', () => {\r\n            if (request.status >= 200 && request.status < 300) {\r\n                const result = JSON.parse(request.responseText);\r\n                callback(result, request.status);\r\n            } else {\r\n                callback(request.statusText, request.status);\r\n            }\r\n        });\r\n\r\n        request.send(JSON.stringify(requestBody));\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n    Typography, Button, withStyles, createStyles, Theme, TextField, Grid, Select, MenuItem,\r\n    Table, TableHead, TableRow, TableCell, TableBody, FormControl, InputLabel, Tooltip\r\n} from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport TournamentStructure from './TournamenStructure';\r\nimport SchedulePhaseComponent from './SchedulePhaseComponent';\r\nimport { BracketType } from './ScheduleStepper';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    textField: {\r\n        marginTop: theme.spacing(1),\r\n        marginRight: theme.spacing(2),\r\n        marginBottom: theme.spacing(1),\r\n        maxWidth: 300,\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginRight: theme.spacing(2),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    table: {\r\n        minWidth: 450,\r\n        maxWidth: 600,\r\n    },\r\n    tableHeader: {\r\n        fontSize: '1em',\r\n        fontWeight: 'bolder',\r\n        color: theme.palette.text.primary,\r\n    },\r\n    title: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(1),\r\n        borderBottomColor: theme.palette.secondary.main,\r\n        borderBottomStyle: 'solid',\r\n        borderBottomWidth: 4,\r\n        flexShrink: 1,\r\n    }\r\n});\r\n\r\nexport interface MatchLengthSettings {\r\n    numberOfGames: number;\r\n    matchLengthMin: number;\r\n}\r\n\r\nexport enum SchedulingMode {\r\n    Monthly = 'Monthly',\r\n    Weekly = 'Weekly',\r\n    Daily = 'Daily',\r\n    Direct = 'Direct',\r\n}\r\n\r\nexport interface SchedulePhase {\r\n    groupId: string;\r\n    startingRoundId: string;\r\n    startDate: Date;\r\n    isFirst: boolean;\r\n}\r\n\r\nexport interface ScheduleConfig {\r\n    schedulingMode: SchedulingMode;\r\n    bracketType: BracketType;\r\n    matchLengthSettings: MatchLengthSettings[];\r\n    phases: SchedulePhase[];\r\n}\r\n\r\ninterface ConfigurationStepProps {\r\n    structure: TournamentStructure;\r\n    config: ScheduleConfig;\r\n    scheduleConfigChanged: (config: ScheduleConfig) => void;\r\n    classes?: any;\r\n}\r\n\r\nclass ConfigurationStep extends React.Component<ConfigurationStepProps, {}> {\r\n    constructor(props: ConfigurationStepProps) {\r\n        super(props);\r\n    }\r\n\r\n    renderMatchLengthConfig = () => {\r\n        const { classes } = this.props;\r\n        return (\r\n            <Table className={classes.table} size='small'>\r\n                <TableHead>\r\n                    <TableRow >\r\n                        <TableCell className={classes.tableHeader} align='right'>Games per Match</TableCell>\r\n                        <TableCell className={classes.tableHeader} >Time per Match (Minutes)</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {this.props.config.matchLengthSettings.map((matchLengthSetting, index) => (\r\n                        <TableRow key={`row-${index}`}>\r\n                            <TableCell component='th' scope='row' align='right'>\r\n                                {matchLengthSetting.numberOfGames}\r\n                            </TableCell>\r\n                            <TableCell >\r\n                                <TextField\r\n                                    label='Match Length'\r\n                                    className={classes.textField}\r\n                                    value={matchLengthSetting.matchLengthMin}\r\n                                    onChange={this.handleChangeMatchLength(index)}\r\n                                    margin='dense'\r\n                                    variant='outlined'\r\n                                    type='number'\r\n                                    error={!this.isValidMatchLength(matchLengthSetting.matchLengthMin)}\r\n                                />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    handleChangeMatchLength = (index: number) => (event: any) => {\r\n        const newCfg = this.props.config;\r\n        newCfg.matchLengthSettings[index].matchLengthMin = Number(event.target.value);\r\n        this.props.scheduleConfigChanged(newCfg);\r\n    }\r\n\r\n    handleChangeMatchMode = (event: any) => {\r\n        const newCfg = this.props.config;\r\n        newCfg.schedulingMode = event.target.value;\r\n        this.props.scheduleConfigChanged(newCfg);\r\n    }\r\n\r\n    isValidMatchLength = (length: number): boolean => {\r\n        return length > 0 && Number.isInteger(length);\r\n    }\r\n\r\n    onPhaseChanged = (index: number) => (phase: SchedulePhase | null) => {\r\n        const newCfg = this.props.config;\r\n        if (phase != null) {\r\n            newCfg.phases[index] = phase;\r\n        } else {\r\n            newCfg.phases.splice(index, 1);\r\n        }\r\n        this.props.scheduleConfigChanged(newCfg);\r\n    }\r\n\r\n    canAddNewPhase(): boolean {\r\n        return this.props.config.phases.length < this.props.structure.getRounds().length;\r\n    }\r\n\r\n    addPhase = () => {\r\n        const newCfg = this.props.config;\r\n        const newRound = this.props.structure.getRounds().find(round => this.props.config.phases.findIndex(phase => phase.startingRoundId == round.id) < 0);\r\n        if (newRound == undefined) {\r\n            return; //add user feedback\r\n        }\r\n\r\n        newCfg.phases.push({\r\n            groupId: newRound.groupId,\r\n            startingRoundId: newRound.id,\r\n            startDate: newCfg.phases[newCfg.phases.length - 1].startDate,\r\n            isFirst: false,\r\n        });\r\n\r\n        this.props.scheduleConfigChanged(newCfg);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const modes: SchedulingMode[] = [SchedulingMode.Direct, SchedulingMode.Daily, SchedulingMode.Weekly, SchedulingMode.Monthly]\r\n\r\n        const phases = this.props.config.phases.map((phase, index) => {\r\n            return (\r\n                <SchedulePhaseComponent\r\n                    phase={phase}\r\n                    structure={this.props.structure}\r\n                    phaseChanged={this.onPhaseChanged(index)}\r\n                    key={`phase-${index}`}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Grid\r\n                container\r\n                direction='column'\r\n            >\r\n                <Typography className={classes.title} variant='h6'>Schedule Mode</Typography>\r\n                <Typography paragraph>Decide how rounds should be scheduled. By specifying a mode other than {SchedulingMode.Direct} you\r\n                can schedule your matches on a daily, weekly or monthly basis. Each round is going to take place\r\n                at a new date. In {SchedulingMode.Direct} mode matches will occur at the earliest time after all previous matches have been played.\r\n                Therefore it is well suited for brackets.</Typography>\r\n                <FormControl className={classes.textField}>\r\n                    <InputLabel>Schedule Mode</InputLabel>\r\n                    <Select\r\n                        value={this.props.config.schedulingMode}\r\n                        onChange={this.handleChangeMatchMode}\r\n                        inputProps={{\r\n                            name: 'schedulingMode',\r\n                        }}\r\n                    >\r\n                        {modes.map((mode, index) => {\r\n                            return (<MenuItem value={mode} key={`mode-${index}-mi`}>{mode}</MenuItem>)\r\n                        })}\r\n                    </Select>\r\n                </FormControl>\r\n                <Typography className={classes.title} variant='h6' component='div'>Manage Phases</Typography>\r\n                <Typography>\r\n                    You can use Phases to start a part of your tournament at a different time. For example\r\n                    if you wanted to skip a day in your weekly round robin because its christmas eve or something, you would\r\n                    add a new phase starting at the first match day after the skipped day.\r\n                </Typography>\r\n                <Typography>\r\n                    This also enables you to use the {SchedulingMode.Direct} mode to schedule a bracket over the course of two days\r\n                    by adding a phase for the second day.\r\n                </Typography>\r\n                <Typography>\r\n                    Please note that the integrety of your structure will not be verified. You are resposible for starting phases at the right time and date.\r\n                    If you do not need to use phases just use the first one as the starting date for your tournament.\r\n                </Typography>\r\n                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                    {phases}\r\n                    <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={this.addPhase}\r\n                        disabled={!this.canAddNewPhase()}\r\n                    >\r\n                        Add Phase\r\n                    </Button>\r\n                </MuiPickersUtilsProvider>\r\n                <Typography className={classes.title} variant='h6'>Match Length</Typography>\r\n                {this.renderMatchLengthConfig()}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ConfigurationStep);","import React from 'react';\r\nimport { Typography, Button, withStyles, createStyles, Theme, TextField, Grid } from '@material-ui/core';\r\nimport ToornamentHelper from './ToornamentHelper';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    textField: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    }\r\n})\r\n\r\ninterface CredentialsStepState {\r\n    apiKey: string,\r\n    clientId: string,\r\n    clientSecret: string,\r\n}\r\n\r\ninterface CredentialsStepProps {\r\n    toornamentHelper: ToornamentHelper;\r\n    credentialsUpdated: () => void;\r\n    classes?: any;\r\n}\r\n\r\nclass CredentialsStep extends React.Component<CredentialsStepProps, CredentialsStepState> {\r\n    constructor(props: CredentialsStepProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            apiKey: props.toornamentHelper.getApiKey() || '',\r\n            clientId: '',\r\n            clientSecret: '',\r\n        }\r\n    }\r\n\r\n    handleChangeApiKey = (event: any) => {\r\n        this.props.toornamentHelper.updateApiKey(event.target.value);\r\n        this.setState({ apiKey: event.target.value });\r\n        this.props.credentialsUpdated();\r\n    }\r\n\r\n    handleChangeClientId = (event: any) => {\r\n        this.setState({ clientId: event.target.value });\r\n    }\r\n\r\n    handleChangeClientSecret = (event: any) => {\r\n        this.setState({ clientSecret: event.target.value });\r\n    }\r\n\r\n    requestToken = () => {\r\n        if (!this.props.toornamentHelper.tokenIsValid()) {\r\n            const callback = () => {\r\n                this.props.credentialsUpdated();\r\n            }\r\n            this.props.toornamentHelper.getToken(this.state.clientId, this.state.clientSecret, callback);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <Grid\r\n                container\r\n                direction='column'\r\n            >\r\n                <TextField\r\n                    label='Api Key'\r\n                    className={classes.textField}\r\n                    value={this.state.apiKey}\r\n                    onChange={this.handleChangeApiKey}\r\n                    error={this.props.toornamentHelper.getApiKey() == null}\r\n                    helperText={this.props.toornamentHelper.getApiKey() == null ? 'You must specify an api key' : ''}\r\n                    margin='dense'\r\n                />\r\n                <TextField\r\n                    label='Client Id'\r\n                    className={classes.textField}\r\n                    value={this.state.clientId}\r\n                    onChange={this.handleChangeClientId}\r\n                    margin='dense'\r\n                />\r\n                <TextField\r\n                    label='Client Secret'\r\n                    className={classes.textField}\r\n                    value={this.state.clientSecret}\r\n                    onChange={this.handleChangeClientSecret}\r\n                    margin='dense'\r\n                />\r\n                <div>\r\n                    <Button\r\n                        variant='contained'\r\n                        color={!this.props.toornamentHelper.tokenIsValid() ? 'primary' : 'default'}\r\n                        className={classes.button}\r\n                        onClick={this.requestToken}\r\n                    >\r\n                        Request Token\r\n                </Button>\r\n                </div>\r\n                <Typography\r\n                    hidden={this.props.toornamentHelper.tokenIsValid()}\r\n                >You must request a token to proceed.</Typography>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(CredentialsStep);","import React from 'react';\r\nimport { SchedulePhase } from './ConfigurationStep';\r\nimport { Grid, Tooltip, FormControl, Select, InputLabel, Theme, createStyles, withStyles, MenuItem, Fab } from '@material-ui/core';\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\nimport TournamentStructure from './TournamenStructure';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    textField: {\r\n        margin: theme.spacing(1),\r\n        maxWidth: 220,\r\n    },\r\n    delButton:{\r\n        margin: theme.spacing(1),\r\n    }\r\n});\r\n\r\ninterface PhaseComponentProps {\r\n    phase: SchedulePhase;\r\n    structure: TournamentStructure;\r\n    phaseChanged: (phase: SchedulePhase | null) => void;\r\n    classes?: any;\r\n}\r\n\r\nclass PhaseComponent extends React.Component<PhaseComponentProps, any> {\r\n    handleChangeStartDate = (moment: any) => {\r\n        const newPhase = this.props.phase;\r\n        newPhase.startDate = moment == null ? moment : moment.toDate();\r\n        this.props.phaseChanged(newPhase);\r\n    }\r\n\r\n    handleChangePhaseRound = (event: any) => {\r\n        const newPhase = this.props.phase;\r\n        newPhase.startingRoundId = event.target.value;\r\n        this.props.phaseChanged(newPhase);;\r\n    }\r\n\r\n    handleChangePhaseGroup = (event: any) => {\r\n        const newPhase = this.props.phase;\r\n        newPhase.groupId = event.target.value;\r\n        this.props.phaseChanged(newPhase);\r\n    }\r\n\r\n    handleDelete = () => {\r\n        this.props.phaseChanged(null);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <Grid\r\n                item\r\n                container\r\n                direction='row'\r\n                alignContent='center'\r\n            >\r\n                <Tooltip title='Select start date'>\r\n                    <div>\r\n                        <KeyboardDateTimePicker\r\n                            disablePast\r\n                            className={classes.textField}\r\n                            ampm={false}\r\n                            value={this.props.phase.startDate}\r\n                            label='Phase Start'\r\n                            onChange={this.handleChangeStartDate}\r\n                        />\r\n                    </div>\r\n                </Tooltip>\r\n                <FormControl className={classes.textField}>\r\n                    <InputLabel>Group</InputLabel>\r\n                    <Select\r\n                        value={this.props.phase.groupId}\r\n                        onChange={this.handleChangePhaseGroup}\r\n                        inputProps={{\r\n                            name: 'startRound',\r\n                        }}\r\n                        disabled={this.props.phase.isFirst}\r\n                    >\r\n                        {this.props.structure.getGroups().map((group, index) => {\r\n                            return (<MenuItem value={group.id} key={`group-${index}-mi`}>{group.name}</MenuItem>)\r\n                        })}\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl className={classes.textField}>\r\n                    <InputLabel>Start Round</InputLabel>\r\n                    <Select\r\n                        value={this.props.phase.startingRoundId}\r\n                        onChange={this.handleChangePhaseRound}\r\n                        inputProps={{\r\n                            name: 'startRound',\r\n                        }}\r\n                        disabled={this.props.phase.isFirst}\r\n                    >\r\n                        {this.props.structure.getRounds().filter(round => round.groupId == this.props.phase.groupId).map((round, index) => {\r\n                            return (<MenuItem value={round.id} key={`round-${index}-mi`}>{round.name}</MenuItem>)\r\n                        })}\r\n                    </Select>\r\n                </FormControl>\r\n                {!this.props.phase.isFirst &&\r\n                        <Fab\r\n                            size='small'\r\n                            aria-label='Delete'\r\n                            className={classes.delButton}\r\n                            onClick={this.handleDelete}\r\n                        >\r\n                            <DeleteIcon />\r\n                        </Fab>\r\n                }\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(PhaseComponent);","import { ScheduleRound, ScheduleGroup, ScheduleMatch, BracketType } from \"./ScheduleStepper\";\r\nimport { MatchLengthSettings, SchedulePhase, SchedulingMode, ScheduleConfig } from \"./ConfigurationStep\";\r\nimport moment from 'moment';\r\n\r\n\r\ninterface RoundDependency {\r\n    roundId: string;\r\n    precedingRoundIds: string[];\r\n    followingRoundIds: string[];\r\n}\r\n\r\nexport default class TournamentStructure {\r\n    private rounds: ScheduleRound[];\r\n    private groups: ScheduleGroup[];\r\n    private matches: ScheduleMatch[];\r\n    private bracketType: BracketType;\r\n\r\n    private roundDependencies: RoundDependency[];\r\n\r\n    constructor(rounds: ScheduleRound[], groups: ScheduleGroup[], matches: ScheduleMatch[], bracketType: BracketType) {\r\n        this.rounds = rounds;\r\n        this.groups = groups;\r\n        this.matches = matches;\r\n        this.bracketType = bracketType;\r\n        this.roundDependencies = [];\r\n        this.createDependencies();\r\n    }\r\n\r\n    private createDependencies() {\r\n        this.matches.forEach((match, index) => {\r\n            let dependencyIndex = this.roundDependencies.findIndex(dep => dep.roundId == match.roundId);\r\n            if (dependencyIndex < 0) {\r\n                dependencyIndex = this.roundDependencies.length;\r\n                this.roundDependencies.push({\r\n                    roundId: match.roundId,\r\n                    precedingRoundIds: [],\r\n                    followingRoundIds: [],\r\n                });\r\n            }\r\n\r\n            const dependency = this.roundDependencies[dependencyIndex];\r\n            const precedingRoundIds: string[] = [];\r\n            const sourceNodeIds = match.opponents.map(opp => opp.sourceNodeId).filter(s => s != null);\r\n\r\n            sourceNodeIds.forEach(nodeId => {\r\n                const source = this.matches.find(match => match.id == nodeId);\r\n                if (source != undefined && dependency.precedingRoundIds.findIndex(id => id == source.roundId) < 0\r\n                    && precedingRoundIds.findIndex(id => id == source.roundId) < 0) {\r\n                    precedingRoundIds.push(source.roundId);\r\n                }\r\n            });\r\n\r\n            let followingRoundIds = this.roundDependencies.filter(dep => dep.precedingRoundIds.findIndex(id => id == match.roundId) >= 0)\r\n                .map(dep => dep.roundId);\r\n            followingRoundIds = followingRoundIds.filter(id => dependency.followingRoundIds.findIndex(dId => id == dId) < 0);\r\n\r\n            this.roundDependencies[dependencyIndex].precedingRoundIds.push(...precedingRoundIds);\r\n            this.roundDependencies[dependencyIndex].followingRoundIds.push(...followingRoundIds);\r\n\r\n            precedingRoundIds.forEach(id => {\r\n                const depIndex = this.roundDependencies.findIndex(d => d.roundId == id);\r\n                if (depIndex >= 0 && this.roundDependencies[depIndex].followingRoundIds.findIndex(fId => fId == match.roundId) < 0) {\r\n                    this.roundDependencies[depIndex].followingRoundIds.push(match.roundId);\r\n                }\r\n            });\r\n\r\n            this.roundDependencies[dependencyIndex] = dependency\r\n        });\r\n    }\r\n\r\n    public getRounds(): ScheduleRound[] {\r\n        return this.rounds;\r\n    }\r\n\r\n    public getMatches(): ScheduleMatch[] {\r\n        return this.matches;\r\n    }\r\n\r\n    public getGroups(): ScheduleGroup[] {\r\n        return this.groups;\r\n    }\r\n\r\n    public getFirstRounds(): ScheduleRound[] {\r\n        const rounds: ScheduleRound[] = [];\r\n        switch (this.bracketType) {\r\n            case BracketType.Bracket:\r\n                let roundDeps = this.roundDependencies.filter(roundDep => roundDep.precedingRoundIds.length == 0);\r\n                roundDeps.forEach(roundDep => {\r\n                    const round = this.rounds.find(round => round.id == roundDep.roundId);\r\n                    if (round != undefined) {\r\n                        rounds.push(round);\r\n                    }\r\n                });\r\n                break;\r\n            default:\r\n            case BracketType.Rounds:\r\n                this.groups.forEach(group => {\r\n                    const firstRound = this.rounds.find(round => round.groupId == group.id);\r\n                    if (firstRound != undefined) {\r\n                        rounds.push(firstRound);\r\n                    }\r\n                })\r\n                break;\r\n        }\r\n        return rounds;\r\n    }\r\n\r\n    public getFollowingRounds(roundId: string): ScheduleRound[] {\r\n        const roundDep = this.roundDependencies.find(rDep => rDep.roundId == roundId);\r\n        if (roundDep == undefined) {\r\n            return [];\r\n        }\r\n\r\n        const result = this.rounds.filter(round => roundDep.followingRoundIds.findIndex(rId => rId == round.id) >= 0);\r\n        return result;\r\n    }\r\n\r\n    public getPrecedingRounds(roundId: string): ScheduleRound[] {\r\n        let result: ScheduleRound[] = [];\r\n        switch (this.bracketType) {\r\n            case BracketType.Bracket:\r\n                const roundDep = this.roundDependencies.find(rDep => rDep.roundId == roundId);\r\n                if (roundDep == undefined) {\r\n                    break;\r\n                }\r\n\r\n                result = this.rounds.filter(round => roundDep.precedingRoundIds.findIndex(rId => rId == round.id) >= 0);\r\n                break;\r\n            case BracketType.Rounds:\r\n            default:\r\n                const roundsByGroup = this.groups.map(group => {\r\n                    return this.rounds.filter(round => round.groupId == group.id);\r\n                });\r\n                roundsByGroup.forEach(rounds => {\r\n                    const roundIndex = rounds.findIndex(round => round.id == roundId);\r\n                    if (roundIndex > 0) {\r\n                        result.push(rounds[roundIndex - 1]);\r\n                    }\r\n                })\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public getLastRounds() {\r\n        return this.rounds.filter(round => this.roundDependencies.findIndex(rDep => rDep.roundId == round.id && rDep.followingRoundIds.length == 0) >= 0);\r\n    }\r\n\r\n    public scheduleTournament(config: ScheduleConfig) {\r\n        const lastRounds = this.getLastRounds();\r\n        lastRounds.forEach(round => this.scheduleRound(round.id, config))\r\n    }\r\n\r\n    private scheduleRound(roundId: string, config: ScheduleConfig): Date {\r\n        const { matchLengthSettings, phases, schedulingMode } = config;\r\n        const roundIndex = this.rounds.findIndex(r => r.id == roundId);\r\n        if (roundIndex < 0) {\r\n            throw new Error('Round must be in TournamentStructure.');\r\n        }\r\n\r\n        const round = this.rounds[roundIndex];\r\n        // check if round is first round of a phase\r\n        const phase = phases.find(p => p.startingRoundId == round.id);\r\n        const previousRounds: ScheduleRound[] = this.getPrecedingRounds(round.id);\r\n        if (phase != undefined) {\r\n            // return phase start date as start date\r\n            this.rounds[roundIndex].scheduledAt = phase.startDate;\r\n            previousRounds.forEach(r => this.scheduleRound(r.id, config));\r\n        } else {\r\n            // schedule round based on max of previous rounds\r\n            if (previousRounds.length == 0) {\r\n                // or start phase if they are first rounds\r\n                this.rounds[roundIndex].scheduledAt = phases[0].startDate;\r\n\r\n            } else {\r\n                const previousDates = previousRounds.map(r => {\r\n                    return { date: this.scheduleRound(r.id, config), round: r }\r\n                });\r\n                previousDates.sort((a, b) => {\r\n                    return b.date.getTime() - a.date.getTime();\r\n                }); // dates sorted desc\r\n                const prevStart = moment(previousDates[0].date);\r\n                switch (schedulingMode) {\r\n                    case SchedulingMode.Daily: this.rounds[roundIndex].scheduledAt = prevStart.add(1, 'days').toDate();\r\n                        break;\r\n                    case SchedulingMode.Weekly: this.rounds[roundIndex].scheduledAt = prevStart.add(1, 'weeks').toDate();\r\n                        break;\r\n                    case SchedulingMode.Monthly: this.rounds[roundIndex].scheduledAt = prevStart.add(1, 'months').toDate();\r\n                        break;\r\n                    case SchedulingMode.Direct:\r\n                    default:\r\n                        const lengthSetting = matchLengthSettings.find(l => l.numberOfGames == previousDates[0].round.roundLength) || { matchLengthMin: 30, numberOfGames: 1 };\r\n                        this.rounds[roundIndex].scheduledAt = prevStart.add(lengthSetting.matchLengthMin, 'minutes').toDate();\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.rounds[roundIndex].scheduledAt!;\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n    Stepper, Step, StepLabel, Typography, TextField, Button, withStyles, createStyles, Theme,\r\n    List, ListItem, ListItemText, CircularProgress, Grid\r\n} from '@material-ui/core';\r\nimport ToornamentHelper from './ToornamentHelper';\r\nimport CredentialsStep from './CredentialsStep';\r\nimport ConfigurationStep, { ScheduleConfig, SchedulingMode } from './ConfigurationStep';\r\nimport TournamentStructure from './TournamenStructure';\r\nimport FetchDialog from './FetchDialog';\r\nimport ReviewSchedule from './ReviewSchedule';\r\nimport ApplyDialog from './ApplyDialog';\r\n\r\nconst tournamentIdItemName = 'tss_i_ti';\r\nconst stageIdItemName = 'tss_i_si';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    root: {\r\n        width: '90%',\r\n    },\r\n    button: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    instructions: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    toorImg: {\r\n        maxWidth: 250,\r\n    }\r\n});\r\n\r\ninterface ScheduleStage {\r\n    id: string;\r\n    name: string;\r\n    number: number;\r\n    size: number;\r\n    type: string;\r\n}\r\n\r\nexport enum BracketType {\r\n    Bracket,\r\n    Rounds,\r\n}\r\n\r\nexport interface ScheduleGroup {\r\n    id: string;\r\n    name: string;\r\n    number: number;\r\n}\r\n\r\nexport interface ScheduleRound {\r\n    id: string;\r\n    groupId: string;\r\n    name: string;\r\n    number: number;\r\n    size: number;\r\n    scheduledAt: Date | null;\r\n    roundLength: number;\r\n}\r\n\r\nexport interface ScheduleMatchOpponent {\r\n    number: number;\r\n    sourceNodeId: string;\r\n    sourceType: string;\r\n}\r\n\r\nexport interface ScheduleMatch {\r\n    id: string;\r\n    roundId: string;\r\n    groupId: string;\r\n    numberOfGames: number;\r\n    opponents: ScheduleMatchOpponent[];\r\n}\r\n\r\ninterface ScheduleStepperState {\r\n    activeStep: number;\r\n    credentialsReady: boolean;\r\n    tournamentId: string;\r\n    stages: ScheduleStage[];\r\n    stageId: string;\r\n    scheduleConfig: ScheduleConfig;\r\n    structure: TournamentStructure;\r\n    fetching: boolean;\r\n    fetchDialogOpen: boolean;\r\n    applyOpen: boolean;\r\n    applyProgress: number;\r\n    applyTotal: number;\r\n}\r\n\r\ninterface ScheduleStepperProps {\r\n    toornamentHelper: ToornamentHelper;\r\n    classes?: any;\r\n}\r\n\r\nclass ScheduleStepper extends React.Component<ScheduleStepperProps, ScheduleStepperState> {\r\n    steps = ['Credentials', 'Tournament', 'Stage', 'Configuration', 'Review'];\r\n\r\n    constructor(props: ScheduleStepperProps) {\r\n        super(props);\r\n\r\n        const credentialsReady = props.toornamentHelper.hasApiKey() && props.toornamentHelper.tokenIsValid();\r\n        this.state = {\r\n            activeStep: credentialsReady ? 1 : 0,\r\n            credentialsReady: credentialsReady,\r\n            tournamentId: sessionStorage.getItem(tournamentIdItemName) || '',\r\n            stages: [],\r\n            stageId: sessionStorage.getItem(stageIdItemName) || '',\r\n            scheduleConfig: {\r\n                schedulingMode: SchedulingMode.Direct,\r\n                matchLengthSettings: [{ numberOfGames: 3, matchLengthMin: 30 }, { numberOfGames: 5, matchLengthMin: 45 }],\r\n                phases: [],\r\n                bracketType: BracketType.Bracket,\r\n            },\r\n            structure: new TournamentStructure([], [], [], BracketType.Bracket),\r\n            fetching: false,\r\n            fetchDialogOpen: false,\r\n            applyOpen: false,\r\n            applyProgress: 0,\r\n            applyTotal: 0,\r\n        }\r\n    }\r\n\r\n    handleNext = () => {\r\n        switch (this.state.activeStep) {\r\n            case 1:\r\n                this.setState({ fetching: true });\r\n                this.props.toornamentHelper.getOrganizerStages(this.state.tournamentId, (results: any[]) => {\r\n                    console.log(results);\r\n                    const stages: ScheduleStage[] = results.map(result => {\r\n                        return {\r\n                            id: result.id,\r\n                            name: result.name,\r\n                            number: result.number,\r\n                            size: result.settings.size,\r\n                            type: result.type,\r\n                        };\r\n                    });\r\n                    this.setState({ stages: stages, activeStep: this.state.activeStep + 1, fetching: false });\r\n                });\r\n                break;\r\n            case 2:\r\n                const stage: ScheduleStage = this.state.stages.find(stage => stage.id == this.state.stageId)!;\r\n                const newScheduleConfig = this.state.scheduleConfig;\r\n                switch (stage.type) {\r\n                    case 'single_elimination':\r\n                    case 'double_elimination':\r\n                    case 'gauntlet':\r\n                    case 'ffa_single_elimination':\r\n                        newScheduleConfig.schedulingMode = SchedulingMode.Direct;\r\n                        newScheduleConfig.bracketType = BracketType.Bracket;\r\n                        break;\r\n                    case 'bracket_groups':\r\n                    case 'pools':\r\n                    case 'league':\r\n                    case 'swiss':\r\n                    case 'simple':\r\n                    case 'ffa_bracket_groups':\r\n                    default:\r\n                        newScheduleConfig.schedulingMode = SchedulingMode.Weekly;\r\n                        newScheduleConfig.bracketType = BracketType.Rounds;\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    scheduleConfig: newScheduleConfig,\r\n                    fetching: true,\r\n                    fetchDialogOpen: true,\r\n                });\r\n                break;\r\n            case 3:\r\n                this.setState({ fetching: true });\r\n                this.state.structure.scheduleTournament(this.state.scheduleConfig);\r\n                this.setState({ fetching: false, activeStep: this.state.activeStep + 1 });\r\n                break;\r\n            case 4:\r\n                this.setState({ fetching: true });\r\n                this.applySchedule(() => this.setState({ fetching: false, activeStep: this.state.activeStep + 1, applyOpen: false }));\r\n                break;\r\n            default:\r\n                this.setState({ activeStep: this.state.activeStep + 1 });\r\n                break;\r\n        }\r\n\r\n    };\r\n\r\n    applySchedule = (callback: () => void) => {\r\n        const matches = this.state.structure.getMatches();\r\n        const rounds = this.state.structure.getRounds();\r\n        this.setState({ applyOpen: true, applyTotal: matches.length, applyProgress: 0 });\r\n        let currentIndex = 0;\r\n        const scheduleNext = () => {\r\n            if (currentIndex >= matches.length) {\r\n                callback();\r\n                return;\r\n            }\r\n\r\n            const match = matches[currentIndex];\r\n            const round = rounds.find(round => round.id == match.roundId) || rounds[0];\r\n            const continueApplying = () => {\r\n                currentIndex++;\r\n                this.setState({ applyProgress: currentIndex })\r\n                scheduleNext();\r\n            }\r\n\r\n            if (round.scheduledAt == null) {\r\n                continueApplying();\r\n                return;\r\n            }\r\n\r\n            this.props.toornamentHelper.scheduleMatch(this.state.tournamentId, match.id, round.scheduledAt, (result: any, requestStatus: number) => {\r\n                if (requestStatus < 200 || requestStatus > 300) {\r\n                    console.log(result);\r\n                }\r\n\r\n                continueApplying();\r\n            });\r\n        }\r\n        scheduleNext();\r\n    }\r\n\r\n    fetchCallback = (rounds: ScheduleRound[], matches: ScheduleMatch[], groups: ScheduleGroup[]) => {\r\n        const newScheduleConfig = this.state.scheduleConfig;\r\n        const gameLengths: number[] = [];\r\n        matches.forEach(match => {\r\n            if (gameLengths.findIndex(n => n == match.numberOfGames) < 0) {\r\n                gameLengths.push(match.numberOfGames);\r\n            }\r\n\r\n            const roundIndex = rounds.findIndex(round => round.id == match.roundId);\r\n            if (roundIndex >= 0 && rounds[roundIndex].roundLength < match.numberOfGames) {\r\n                rounds[roundIndex].roundLength = match.numberOfGames;\r\n            }\r\n        });\r\n\r\n        newScheduleConfig.matchLengthSettings = gameLengths.map(length => {\r\n            return { numberOfGames: length, matchLengthMin: 30 };\r\n        });\r\n\r\n        const structure = new TournamentStructure(rounds, groups, matches, newScheduleConfig.bracketType);\r\n        const firstRounds = structure.getFirstRounds();\r\n\r\n        newScheduleConfig.phases = firstRounds.map(round => {\r\n            return {\r\n                startingRoundId: round.id,\r\n                groupId: round.groupId,\r\n                startDate: new Date(),\r\n                isFirst: true,\r\n            };\r\n        });\r\n\r\n        this.setState({\r\n            activeStep: this.state.activeStep + 1,\r\n            scheduleConfig: newScheduleConfig,\r\n            structure: structure,\r\n            fetching: false,\r\n            fetchDialogOpen: false,\r\n        });\r\n    }\r\n\r\n    handleBack = () => {\r\n        if (this.state.activeStep == 0) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ activeStep: this.state.activeStep - 1 });\r\n    };\r\n\r\n    handleReset = () => {\r\n        this.setState({ activeStep: 0 });\r\n    };\r\n\r\n    handleChangeTournamentId = (event: any) => {\r\n        const tournamentId = event.target.value;\r\n        sessionStorage.setItem(tournamentIdItemName, tournamentId)\r\n        this.setState({ tournamentId: tournamentId });\r\n    }\r\n\r\n    handleChangeStageId = (event: any) => {\r\n        const stageId = event.target.value;\r\n        sessionStorage.setItem(stageIdItemName, stageId)\r\n        this.setState({ stageId: stageId });\r\n    }\r\n\r\n    canProceed = (): boolean => {\r\n        switch (this.state.activeStep) {\r\n            case 0:\r\n                return this.state.credentialsReady;\r\n            case 1:\r\n                return this.state.tournamentId != '';\r\n            case 2:\r\n                return this.state.stageId != '';\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n\r\n    getStepContent = (step: number) => {\r\n        const { classes } = this.props;\r\n        switch (step) {\r\n            case 0:\r\n                return <CredentialsStep toornamentHelper={this.props.toornamentHelper} credentialsUpdated={this.credentialsUpdated} />;\r\n            case 1:\r\n                return (\r\n                    <div>\r\n                        <TextField\r\n                            label='Tournament Id'\r\n                            className={classes.textField}\r\n                            value={this.state.tournamentId}\r\n                            onChange={this.handleChangeTournamentId}\r\n                            margin='dense'\r\n                            variant='outlined'\r\n                        />\r\n                        <Typography>Enter the tournament id.</Typography>\r\n                        <Typography variant='caption' display='block'>You will find it in the Link to your tournament. In this example the higlighted part is the tournament id:</Typography>\r\n                        <Typography variant='caption' display='block'>\r\n                            https://www.toornament.com/en_US/tournaments/\r\n                                <Typography variant='caption' color='secondary' display='inline'>2859636902129573888</Typography>\r\n                            /information\r\n                        </Typography>\r\n                    </div>\r\n                );\r\n            case 2:\r\n                return (\r\n                    <div>\r\n                        <List>\r\n                            {this.state.stages.map((stage, index) => {\r\n                                return (\r\n                                    <ListItem\r\n                                        button\r\n                                        selected={this.state.stageId == stage.id}\r\n                                        onClick={() => this.setState({ stageId: stage.id })}\r\n                                        key={`stage-${index}`}\r\n                                    >\r\n                                        <ListItemText primary={`${stage.number}. ${stage.name}`} secondary={`${stage.size} Teams`} />\r\n                                    </ListItem>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                        <FetchDialog\r\n                            open={this.state.fetchDialogOpen}\r\n                            tournamentId={this.state.tournamentId}\r\n                            stageId={this.state.stageId}\r\n                            callback={this.fetchCallback}\r\n                            toornamentHelper={this.props.toornamentHelper}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 3:\r\n                return (\r\n                    <ConfigurationStep\r\n                        config={this.state.scheduleConfig}\r\n                        scheduleConfigChanged={this.scheduleConfigChanged}\r\n                        structure={this.state.structure}\r\n                    />\r\n                );\r\n            case 4:\r\n                return (\r\n                    <ReviewSchedule structure={this.state.structure} />\r\n                );\r\n            default:\r\n                return <div></div>;\r\n        }\r\n    }\r\n\r\n    scheduleConfigChanged = (config: ScheduleConfig) => {\r\n        this.setState({ scheduleConfig: config });\r\n    }\r\n\r\n    credentialsUpdated = () => {\r\n        const credentialsReady = this.props.toornamentHelper.hasApiKey() && this.props.toornamentHelper.tokenIsValid();\r\n        this.setState({ credentialsReady: credentialsReady });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.root} >\r\n                <Stepper activeStep={this.state.activeStep}>\r\n                    {this.steps.map((label, index) => {\r\n                        const stepProps: { completed?: boolean } = {};\r\n                        const labelProps: { optional?: React.ReactNode } = {};\r\n                        return (\r\n                            <Step key={label} {...stepProps}>\r\n                                <StepLabel {...labelProps}>{label}</StepLabel>\r\n                            </Step>\r\n                        );\r\n                    })}\r\n                </Stepper>\r\n                <div>\r\n                    {this.state.activeStep === this.steps.length ? (\r\n                        <div>\r\n                            <Typography className={classes.instructions}>\r\n                                Your stage has beeen scheduled. If you want to schedule another stage press the button below.\r\n                            </Typography>\r\n                            <Button onClick={this.handleReset} className={classes.button}>\r\n                                Back to start.\r\n                            </Button>\r\n                        </div>\r\n                    ) : (\r\n                            <div>\r\n                                <div className={classes.instructions}>{this.getStepContent(this.state.activeStep)}</div>\r\n                                <Grid\r\n                                    container\r\n                                    alignContent='center'\r\n                                    direction='row'\r\n                                >\r\n                                    <Button disabled={this.state.activeStep === 0} onClick={this.handleBack} className={classes.button}>\r\n                                        Back\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant='contained'\r\n                                        color='primary'\r\n                                        onClick={this.handleNext}\r\n                                        className={classes.button}\r\n                                        disabled={!this.canProceed()}\r\n                                    >\r\n                                        {this.state.activeStep === this.steps.length - 1 ? 'Finish' : 'Next'}\r\n                                    </Button>\r\n                                    <div\r\n                                        hidden={!this.state.fetching}\r\n                                    >\r\n                                        <CircularProgress size={30} thickness={5} />\r\n                                    </div>\r\n                                </Grid>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n                <ApplyDialog open={this.state.applyOpen} progress={this.state.applyProgress} total={this.state.applyTotal} />\r\n                <img src={'./PoweredbyToor_Black.png'} className={classes.toorImg}></img>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ScheduleStepper);","import React from 'react';\r\nimport { Dialog, DialogTitle, Grid, CircularProgress, Typography, Theme, createStyles, withStyles, DialogContent } from '@material-ui/core';\r\nimport ToornamentHelper from \"./ToornamentHelper\";\r\nimport { ScheduleRound, ScheduleMatch, ScheduleGroup } from \"./ScheduleStepper\";\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    checkIcon: {\r\n        color: green[300],\r\n    },\r\n    iconContainer: {\r\n        width: 20,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n});\r\n\r\ninterface FetchDialogProps {\r\n    open: boolean;\r\n    tournamentId: string;\r\n    stageId: string;\r\n    toornamentHelper: ToornamentHelper;\r\n    callback: (rounds: ScheduleRound[], matches: ScheduleMatch[], groups: ScheduleGroup[]) => void;\r\n    classes?: any;\r\n}\r\n\r\ninterface FetchDialogState {\r\n    roundsFinished: boolean;\r\n    matchesFinished: boolean;\r\n    groupsFinished: boolean;\r\n    rounds: ScheduleRound[];\r\n    matches: ScheduleMatch[];\r\n    groups: ScheduleGroup[];\r\n    matchIndex: number;\r\n    bracketNodeIndex: number,\r\n}\r\n\r\nfunction getDefaultFetchDialogState(): FetchDialogState {\r\n    return {\r\n        roundsFinished: false,\r\n        matchesFinished: false,\r\n        groupsFinished: false,\r\n        rounds: [],\r\n        matches: [],\r\n        groups: [],\r\n        matchIndex: 0,\r\n        bracketNodeIndex: 0,\r\n    }\r\n}\r\n\r\nclass FetchDialog extends React.Component<FetchDialogProps, FetchDialogState> {\r\n    fetchOnUpdate: boolean = false;\r\n\r\n    constructor(props: FetchDialogProps) {\r\n        super(props);\r\n\r\n        this.state = getDefaultFetchDialogState();\r\n    }\r\n\r\n    fetchStageData() {\r\n        const { tournamentId, stageId, toornamentHelper, callback } = this.props;\r\n\r\n        toornamentHelper.getOrganizerGroups(tournamentId, stageId, (results: any[]) => {\r\n            const groups = results.map(result => {\r\n                return {\r\n                    id: result.id,\r\n                    name: result.name,\r\n                    number: result.number,\r\n                };\r\n            });\r\n\r\n            this.setState({ groups: groups, groupsFinished: true });\r\n\r\n            if (this.state.roundsFinished && this.state.matchesFinished) {\r\n                callback(this.state.rounds, this.state.matches, this.state.groups);\r\n            }\r\n        });\r\n\r\n        toornamentHelper.getOrganizerRounds(tournamentId, stageId, (results: any[]) => {\r\n            const rounds = results.map(result => {\r\n                return {\r\n                    id: result.id,\r\n                    groupId: result.group_id,\r\n                    name: result.name,\r\n                    number: result.number,\r\n                    size: result.settings.size,\r\n                    scheduledAt: null,\r\n                    roundLength: 1,\r\n                };\r\n            });\r\n\r\n            this.setState({ rounds: rounds, roundsFinished: true });\r\n\r\n            if (this.state.matchesFinished && this.state.groupsFinished) {\r\n                callback(this.state.rounds, this.state.matches, this.state.groups);\r\n            }\r\n        });\r\n\r\n        toornamentHelper.getOrganizerMatches(tournamentId, stageId, (matchResults: any[]) => {\r\n            const matches = matchResults.map(result => {\r\n                return {\r\n                    id: result.id,\r\n                    groupId: result.group_id,\r\n                    roundId: result.round_id,\r\n                    numberOfGames: 0,\r\n                    opponents: []\r\n                }\r\n            });\r\n\r\n            this.setState({ matches: matches });\r\n\r\n            const finishMatches = () => {\r\n                if (this.state.roundsFinished && this.state.groupsFinished) {\r\n                    callback(this.state.rounds, this.state.matches, this.state.groups);\r\n                }\r\n                else {\r\n                    this.setState({ matchesFinished: true });\r\n                }\r\n            }\r\n\r\n            const getNodes = () => {\r\n                toornamentHelper.getBracketNodes(tournamentId, stageId, (results: any[]) => {\r\n                    results.forEach((result, index) => {\r\n                        let matchIndex = index;\r\n                        const matches = this.state.matches;\r\n                        let match = matches[matchIndex];\r\n\r\n                        if (match == null || match.id != result.id) {\r\n                            matchIndex = matches.findIndex(m => m.id == result.id);\r\n                            if (matchIndex < 0) {\r\n                                return;\r\n                            }\r\n                            match = matches[matchIndex];\r\n                        }\r\n\r\n                        match.opponents = result.opponents.map((opponent: any) => {\r\n                            return {\r\n                                number: opponent.number,\r\n                                sourceType: opponent.source_type,\r\n                                sourceNodeId: opponent.source_node_id,\r\n                            };\r\n                        });\r\n                        matches[matchIndex] = match;\r\n                        this.setState({ matches: matches, bracketNodeIndex: index + 1 });\r\n                    });\r\n                    finishMatches();\r\n                });\r\n            }\r\n\r\n            const callNext = () => {\r\n                if (this.state.matchIndex >= this.state.matches.length) {\r\n                    getNodes();\r\n                    return;\r\n                }\r\n\r\n                const matchId = this.state.matches[this.state.matchIndex].id;\r\n                const callback = (results: any[]) => {\r\n                    const matches = this.state.matches;\r\n                    matches[this.state.matchIndex].numberOfGames = results.length;\r\n                    this.setState({ matches: matches, matchIndex: this.state.matchIndex + 1 });\r\n                    callNext();\r\n                }\r\n                toornamentHelper.getOrganizerMatchGames(tournamentId, matchId, callback)\r\n            };\r\n\r\n            callNext();\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(newProps: FetchDialogProps) {\r\n        if (!this.props.open && newProps.open) {\r\n            this.fetchOnUpdate = true;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.fetchOnUpdate) {\r\n            this.fetchOnUpdate = false;\r\n            this.setState(getDefaultFetchDialogState());\r\n            this.fetchStageData();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props\r\n        const progressSize = 20;\r\n        return (\r\n            <Dialog open={this.props.open}>\r\n                <DialogTitle>Fetching Tournament Properties...</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                    >\r\n                        <Grid\r\n                            item\r\n                            container\r\n                            alignContent='center'\r\n                            className={classes.iconContainer}\r\n                        >\r\n                            {this.state.groupsFinished ? <CheckIcon className={classes.checkIcon} /> : <CircularProgress size={progressSize} />}\r\n                        </Grid>\r\n                        <Typography>Fetching Groups</Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                    >\r\n                        <Grid\r\n                            item\r\n                            container\r\n                            alignContent='center'\r\n                            className={classes.iconContainer}\r\n                        >\r\n                            {this.state.roundsFinished ? <CheckIcon className={classes.checkIcon} /> : <CircularProgress size={progressSize} />}\r\n                        </Grid>\r\n                        <Typography>Fetching Rounds</Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                    >\r\n                        <Grid\r\n                            item\r\n                            container\r\n                            alignContent='center'\r\n                            className={classes.iconContainer}\r\n                        >\r\n                            {this.state.matches.length != 0 ? <CheckIcon className={classes.checkIcon} /> : <CircularProgress size={progressSize} />}\r\n                        </Grid>\r\n                        <Typography>Fetching Matches</Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        hidden={this.state.matches.length == 0}\r\n                    >\r\n                        <Grid\r\n                            item\r\n                            container\r\n                            alignContent='center'\r\n                            className={classes.iconContainer}\r\n                        >\r\n                            {this.state.matchIndex >= this.state.matches.length ? <CheckIcon className={classes.checkIcon} /> : <CircularProgress size={progressSize} />}\r\n                        </Grid>\r\n                        <Typography>{this.state.matchIndex}/{this.state.matches.length} Fetching Match Length</Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        hidden={this.state.matchIndex < this.state.matches.length}\r\n                    >\r\n                        <Grid\r\n                            item\r\n                            container\r\n                            alignContent='center'\r\n                            className={classes.iconContainer}\r\n                        >\r\n                            {this.state.bracketNodeIndex >= this.state.matches.length ? <CheckIcon className={classes.checkIcon} /> : <CircularProgress size={progressSize} />}\r\n                        </Grid>\r\n                        <Typography>{this.state.bracketNodeIndex}/{this.state.matches.length} Fetching Bracket Nodes</Typography>\r\n                    </Grid>\r\n                </DialogContent>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(FetchDialog);","import React from 'react';\r\nimport {\r\n    createStyles, Theme, withStyles, Table, TableBody, TableRow, TableCell\r\n} from '@material-ui/core';\r\nimport TournamentStructure from './TournamenStructure';\r\nimport { ScheduleRound } from './ScheduleStepper';\r\nimport moment from 'moment';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n});\r\n\r\ninterface ReviewScheduleProps {\r\n    structure: TournamentStructure;\r\n    classes?: any;\r\n}\r\n\r\nclass ReviewSchedule extends React.Component<ReviewScheduleProps, any> {\r\n    getGroupName = (round: ScheduleRound): string => {\r\n        const group = this.props.structure.getGroups().find(group => group.id == round.groupId);\r\n        return group != undefined ? group.name : 'Unknown Group';\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        const tableRows = this.props.structure.getRounds().sort((a, b) => {\r\n            if (a.scheduledAt == null) {\r\n                return -1;\r\n            }\r\n\r\n            if (b.scheduledAt == null) {\r\n                return 1;\r\n            }\r\n\r\n            return a.scheduledAt.getTime() - b.scheduledAt.getTime()\r\n        }).map(round => {\r\n            return (\r\n                <TableRow>\r\n                    <TableCell>\r\n                        {this.getGroupName(round)}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        {round.name}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        {round.scheduledAt != null ? moment(round.scheduledAt).format('llll') : 'Error while scheduling, please contact dev.'}\r\n                    </TableCell>\r\n                </TableRow>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Table>\r\n                <TableBody>\r\n                    {tableRows}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ReviewSchedule);","import React from 'react';\r\nimport { Dialog, DialogTitle, Grid, CircularProgress, Typography, Theme, createStyles, withStyles, DialogContent } from '@material-ui/core';\r\nimport ToornamentHelper from \"./ToornamentHelper\";\r\nimport { ScheduleRound, ScheduleMatch, ScheduleGroup } from \"./ScheduleStepper\";\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    checkIcon: {\r\n        color: green[300],\r\n    },\r\n    iconContainer: {\r\n        width: 20,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n});\r\n\r\ninterface FetchDialogProps {\r\n    open: boolean;\r\n    progress: number;\r\n    total: number;\r\n    classes?: any;\r\n}\r\n\r\nclass ApplyDialog extends React.Component<FetchDialogProps, any> {\r\n\r\n    render() {\r\n        const { classes } = this.props\r\n        const progressSize = 20;\r\n        return (\r\n            <Dialog open={this.props.open}>\r\n                <DialogTitle>Applying Changes</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                    >\r\n                        <Grid\r\n                            item\r\n                            container\r\n                            alignContent='center'\r\n                            className={classes.iconContainer}\r\n                        >\r\n                            {this.props.progress != this.props.total ? <CheckIcon className={classes.checkIcon} /> : <CircularProgress size={progressSize} />}\r\n                        </Grid>\r\n                        <Typography>{this.props.progress}/{this.props.total} Applying Matches</Typography>\r\n                    </Grid>\r\n                </DialogContent>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ApplyDialog);","import React from 'react';\r\nimport {\r\n    createStyles, Theme, withStyles, CssBaseline, Typography, AppBar, Toolbar\r\n} from '@material-ui/core';\r\nimport ToornamentHelper from './ToornamentHelper';\r\nimport ScheduleStepper from './ScheduleStepper';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        maxWidth: 1000,\r\n        padding: theme.spacing(3),\r\n        marginTop: theme.spacing(6),\r\n    },\r\n    button: {\r\n        marginLeft: 16,\r\n        marginTop: 8,\r\n        marginRight: 16,\r\n        marginBottom: 8,\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n        overflowX: 'auto',\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\ninterface AppState {\r\n    toornamentHelper: ToornamentHelper,\r\n}\r\n\r\nclass App extends React.Component<any, AppState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            toornamentHelper: new ToornamentHelper(),\r\n        }\r\n    }\r\n\r\n    fetchEverything = () => {\r\n        if (this.state.toornamentHelper.tokenIsValid()) {\r\n            /*\r\n            const matchesCallback = (matchIds: string[]) => {\r\n                let currentIndex = 0;\r\n\r\n\r\n                const callNext = () => {\r\n                    if (currentIndex >= matchIds.length) {\r\n                        return;\r\n                    }\r\n\r\n                    const matchId = matchIds[currentIndex];\r\n                    const callback = (result: any) => {\r\n                        console.log(`games from: ${matchId}`, result);\r\n                        currentIndex++;\r\n                        callNext();\r\n                    }\r\n                    this.state.toornamentHelper.getOrganizerMatchGames(this.state.apiKey, this.state.tournamentId, matchId, callback)\r\n                };\r\n                // callNext();\r\n            }\r\n\r\n            this.state.toornamentHelper.getOrganizerRounds(this.state.apiKey, this.state.tournamentId, this.state.stageId, (results: any[]) => {\r\n                let currentIndex = 0;\r\n                console.log('rounds', results);\r\n\r\n                const callNext = () => {\r\n                    if (currentIndex >= results.length) {\r\n                        return;\r\n                    }\r\n\r\n                    const roundId = results[currentIndex].id;\r\n                    const callback = (result: any) => {\r\n                        console.log(`nodes from round ${roundId}`, result);\r\n                        currentIndex++;\r\n                        callNext();\r\n                    }\r\n\r\n                    this.state.toornamentHelper.getOrganizerBracketNodes(this.state.apiKey, this.state.tournamentId, this.state.stageId, roundId, callback)\r\n                };\r\n\r\n                callNext();\r\n            });\r\n            // this.state.toornamentHelper.getOrganizerStages(this.state.apiKey, this.state.tournamentId);\r\n            // this.state.toornamentHelper.getOrganizerTournament(this.state.apiKey, this.state.tournamentId);\r\n            this.state.toornamentHelper.getOrganizerMatches(this.state.apiKey, this.state.tournamentId, this.state.stageId, matchesCallback);\r\n\r\n        */\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        \r\n        return (\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar\r\n                    position=\"fixed\"\r\n                    className={classes.appBar}\r\n                >\r\n                    <Toolbar variant='dense'>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Toornament Smart Schedule\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <main\r\n                    className={classes.content}\r\n                >\r\n                    <ScheduleStepper toornamentHelper={this.state.toornamentHelper} />\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}