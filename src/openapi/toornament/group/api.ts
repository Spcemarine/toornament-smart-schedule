/* tslint:disable */
/* eslint-disable */
/**
 * Groups
 * The Toornament platform connects your website and application with the eSports tournaments around the world.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: contact@toornament.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GroupBase
 */
export interface GroupBase {
    /**
     * The name of the group.
     * @type {string}
     * @memberof GroupBase
     */
    'name'?: string;
    /**
     * Whether the group is closed.
     * @type {boolean}
     * @memberof GroupBase
     */
    'closed'?: boolean;
    /**
     * Settings that describe the various options related to the stage types.
     * @type {object}
     * @memberof GroupBase
     */
    'settings'?: object;
}
/**
 * 
 * @export
 * @interface GroupFully
 */
export interface GroupFully {
    /**
     * The name of the group.
     * @type {string}
     * @memberof GroupFully
     */
    'name': string;
    /**
     * Whether the group is closed.
     * @type {boolean}
     * @memberof GroupFully
     */
    'closed': boolean;
    /**
     * Settings that describe the various options related to the stage types.
     * @type {object}
     * @memberof GroupFully
     */
    'settings': object;
    /**
     * The id of the group.
     * @type {string}
     * @memberof GroupFully
     */
    'id': string;
    /**
     * The id of the stage that contains the group.
     * @type {string}
     * @memberof GroupFully
     */
    'stage_id': string;
    /**
     * A number used for ordering groups.
     * @type {number}
     * @memberof GroupFully
     */
    'number': number;
    /**
     * Settings that define the match configuration used in the group.
     * @type {object}
     * @memberof GroupFully
     */
    'match_settings': object;
    /**
     * The id of the tournament that contains this group.
     * @type {string}
     * @memberof GroupFully
     */
    'tournament_id': string;
}
/**
 * 
 * @export
 * @interface GroupFullyAllOf
 */
export interface GroupFullyAllOf {
    /**
     * The id of the tournament that contains this group.
     * @type {string}
     * @memberof GroupFullyAllOf
     */
    'tournament_id': string;
}
/**
 * 
 * @export
 * @interface GroupLegacy
 */
export interface GroupLegacy {
    /**
     * The name of the group.
     * @type {string}
     * @memberof GroupLegacy
     */
    'name': string;
    /**
     * Whether the group is closed.
     * @type {boolean}
     * @memberof GroupLegacy
     */
    'closed': boolean;
    /**
     * Settings that describe the various options related to the stage types.
     * @type {object}
     * @memberof GroupLegacy
     */
    'settings': object;
    /**
     * The id of the group.
     * @type {string}
     * @memberof GroupLegacy
     */
    'id': string;
    /**
     * The id of the stage that contains the group.
     * @type {string}
     * @memberof GroupLegacy
     */
    'stage_id': string;
    /**
     * A number used for ordering groups.
     * @type {number}
     * @memberof GroupLegacy
     */
    'number': number;
}
/**
 * 
 * @export
 * @interface GroupLegacyAllOf
 */
export interface GroupLegacyAllOf {
    /**
     * The id of the group.
     * @type {string}
     * @memberof GroupLegacyAllOf
     */
    'id': string;
    /**
     * The id of the stage that contains the group.
     * @type {string}
     * @memberof GroupLegacyAllOf
     */
    'stage_id': string;
    /**
     * A number used for ordering groups.
     * @type {number}
     * @memberof GroupLegacyAllOf
     */
    'number': number;
}
/**
 * 
 * @export
 * @interface GroupUpdate
 */
export interface GroupUpdate {
    /**
     * The name of the group.
     * @type {string}
     * @memberof GroupUpdate
     */
    'name'?: string;
    /**
     * Whether the group is closed.
     * @type {boolean}
     * @memberof GroupUpdate
     */
    'closed'?: boolean;
    /**
     * Settings that describe the various options related to the stage types.
     * @type {object}
     * @memberof GroupUpdate
     */
    'settings'?: object;
    /**
     * Settings that define the match configuration used in the group.
     * @type {object}
     * @memberof GroupUpdate
     */
    'match_settings'?: object;
}
/**
 * 
 * @export
 * @interface GroupUpdateAllOf
 */
export interface GroupUpdateAllOf {
    /**
     * Settings that define the match configuration used in the group.
     * @type {object}
     * @memberof GroupUpdateAllOf
     */
    'match_settings'?: object;
}

/**
 * OrganizerGroupsApi - axios parameter creator
 * @export
 */
export const OrganizerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all groups with basic information and settings.
         * @summary Retrieve all groups.
         * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {Array<string>} [tournamentIds] Only return groups for the given list of tournaments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: async (range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, tournamentIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'range' is not null or undefined
            assertParamExists('groupsGet', 'range', range)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result", "organizer:admin"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result", "organizer:admin"], configuration)

            if (stageIds) {
                localVarQueryParameter['stage_ids'] = stageIds.join(COLLECTION_FORMATS.csv);
            }

            if (stageNumbers) {
                localVarQueryParameter['stage_numbers'] = stageNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (tournamentIds) {
                localVarQueryParameter['tournament_ids'] = tournamentIds.join(COLLECTION_FORMATS.csv);
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a group by the given id with basic information and settings.
         * @summary Retrieve a single group.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsIdGet', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result", "organizer:admin"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result", "organizer:admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all groups of a tournament with basic information and settings.
         * @summary Retrieve all groups of a tournament.
         * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdGroupsGet: async (range: string, tournamentId: string, stageIds?: Array<string>, stageNumbers?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'range' is not null or undefined
            assertParamExists('tournamentsTournamentIdGroupsGet', 'range', range)
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdGroupsGet', 'tournamentId', tournamentId)
            const localVarPath = `/tournaments/{tournament_id}/groups`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            if (stageIds) {
                localVarQueryParameter['stage_ids'] = stageIds.join(COLLECTION_FORMATS.csv);
            }

            if (stageNumbers) {
                localVarQueryParameter['stage_numbers'] = stageNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a group with the given id with basic information and settings.
         * @summary Retrieve a single group of a tournament.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdGroupsIdGet: async (tournamentId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdGroupsIdGet', 'tournamentId', tournamentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tournamentsTournamentIdGroupsIdGet', 'id', id)
            const localVarPath = `/tournaments/{tournament_id}/groups/{id}`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizerGroupsApi - functional programming interface
 * @export
 */
export const OrganizerGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizerGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all groups with basic information and settings.
         * @summary Retrieve all groups.
         * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {Array<string>} [tournamentIds] Only return groups for the given list of tournaments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGet(range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, tournamentIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupFully>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGet(range, stageIds, stageNumbers, tournamentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a group by the given id with basic information and settings.
         * @summary Retrieve a single group.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupFully>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all groups of a tournament with basic information and settings.
         * @summary Retrieve all groups of a tournament.
         * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdGroupsGet(range: string, tournamentId: string, stageIds?: Array<string>, stageNumbers?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupLegacy>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdGroupsGet(range, tournamentId, stageIds, stageNumbers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a group with the given id with basic information and settings.
         * @summary Retrieve a single group of a tournament.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdGroupsIdGet(tournamentId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupLegacy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdGroupsIdGet(tournamentId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizerGroupsApi - factory interface
 * @export
 */
export const OrganizerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizerGroupsApiFp(configuration)
    return {
        /**
         * Returns all groups with basic information and settings.
         * @summary Retrieve all groups.
         * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {Array<string>} [tournamentIds] Only return groups for the given list of tournaments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, tournamentIds?: Array<string>, options?: any): AxiosPromise<GroupFully> {
            return localVarFp.groupsGet(range, stageIds, stageNumbers, tournamentIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a group by the given id with basic information and settings.
         * @summary Retrieve a single group.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsIdGet(id: string, options?: any): AxiosPromise<GroupFully> {
            return localVarFp.groupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all groups of a tournament with basic information and settings.
         * @summary Retrieve all groups of a tournament.
         * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdGroupsGet(range: string, tournamentId: string, stageIds?: Array<string>, stageNumbers?: Array<number>, options?: any): AxiosPromise<Array<GroupLegacy>> {
            return localVarFp.tournamentsTournamentIdGroupsGet(range, tournamentId, stageIds, stageNumbers, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a group with the given id with basic information and settings.
         * @summary Retrieve a single group of a tournament.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdGroupsIdGet(tournamentId: string, id: string, options?: any): AxiosPromise<GroupLegacy> {
            return localVarFp.tournamentsTournamentIdGroupsIdGet(tournamentId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizerGroupsApi - object-oriented interface
 * @export
 * @class OrganizerGroupsApi
 * @extends {BaseAPI}
 */
export class OrganizerGroupsApi extends BaseAPI {
    /**
     * Returns all groups with basic information and settings.
     * @summary Retrieve all groups.
     * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
     * @param {Array<string>} [stageIds] A list of stage ids to filter.
     * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
     * @param {Array<string>} [tournamentIds] Only return groups for the given list of tournaments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerGroupsApi
     */
    public groupsGet(range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, tournamentIds?: Array<string>, options?: AxiosRequestConfig) {
        return OrganizerGroupsApiFp(this.configuration).groupsGet(range, stageIds, stageNumbers, tournamentIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a group by the given id with basic information and settings.
     * @summary Retrieve a single group.
     * @param {string} id The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerGroupsApi
     */
    public groupsIdGet(id: string, options?: AxiosRequestConfig) {
        return OrganizerGroupsApiFp(this.configuration).groupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all groups of a tournament with basic information and settings.
     * @summary Retrieve all groups of a tournament.
     * @param {string} range A range of requested items using the \&#39;groups\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
     * @param {string} tournamentId The id of the tournament you want to retrieve data about.
     * @param {Array<string>} [stageIds] A list of stage ids to filter.
     * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerGroupsApi
     */
    public tournamentsTournamentIdGroupsGet(range: string, tournamentId: string, stageIds?: Array<string>, stageNumbers?: Array<number>, options?: AxiosRequestConfig) {
        return OrganizerGroupsApiFp(this.configuration).tournamentsTournamentIdGroupsGet(range, tournamentId, stageIds, stageNumbers, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a group with the given id with basic information and settings.
     * @summary Retrieve a single group of a tournament.
     * @param {string} tournamentId The id of the tournament you want to retrieve data about.
     * @param {string} id The id of the group.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerGroupsApi
     */
    public tournamentsTournamentIdGroupsIdGet(tournamentId: string, id: string, options?: AxiosRequestConfig) {
        return OrganizerGroupsApiFp(this.configuration).tournamentsTournamentIdGroupsIdGet(tournamentId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


