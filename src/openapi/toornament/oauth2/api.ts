/* tslint:disable */
/* eslint-disable */
/**
 * OAuth 2
 * The Toornament platform connects your website and application with the eSports tournaments around the world.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: contact@toornament.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface OAuth
 */
export interface OAuth {
    /**
     * The requested access token.
     * @type {string}
     * @memberof OAuth
     */
    'access_token': string;
    /**
     * The number of seconds before the access token expires.
     * @type {number}
     * @memberof OAuth
     */
    'expires_in': number;
    /**
     * The type of access token returned. For the moment, limited to \"bearer\".
     * @type {string}
     * @memberof OAuth
     */
    'token_type': OAuthTokenTypeEnum;
    /**
     * The scopes that the token has access to.
     * @type {string}
     * @memberof OAuth
     */
    'scope': string | null;
}

export const OAuthTokenTypeEnum = {
    Bearer: 'bearer'
} as const;

export type OAuthTokenTypeEnum = typeof OAuthTokenTypeEnum[keyof typeof OAuthTokenTypeEnum];


/**
 * Oauth2Api - axios parameter creator
 * @export
 */
export const Oauth2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Issues an access token to access the resources of a user. The access token is valid for 25 hours. The \"client_credentials\", “authorization_code” and “refresh_token” grant types are currently supported. The client makes a request by adding the following parameters using the \"application/x-www-form-urlencoded\" content type. The request-body is using parameters, but the HTTP response is using the \"application/json\" media type. 
         * @summary Obtain an OAuth 2 access token.
         * @param {string} grantType The OAuth 2 grant type requested.
         * @param {string} clientId The client ID of the application.
         * @param {string} clientSecret The client secret of the application.
         * @param {string} [scope] The scopes that the token has access to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthV2TokenPost: async (grantType: string, clientId: string, clientSecret: string, scope?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('oauthV2TokenPost', 'grantType', grantType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('oauthV2TokenPost', 'clientId', clientId)
            // verify required parameter 'clientSecret' is not null or undefined
            assertParamExists('oauthV2TokenPost', 'clientSecret', clientSecret)
            const localVarPath = `/oauth/v2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Oauth2Api - functional programming interface
 * @export
 */
export const Oauth2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Oauth2ApiAxiosParamCreator(configuration)
    return {
        /**
         * Issues an access token to access the resources of a user. The access token is valid for 25 hours. The \"client_credentials\", “authorization_code” and “refresh_token” grant types are currently supported. The client makes a request by adding the following parameters using the \"application/x-www-form-urlencoded\" content type. The request-body is using parameters, but the HTTP response is using the \"application/json\" media type. 
         * @summary Obtain an OAuth 2 access token.
         * @param {string} grantType The OAuth 2 grant type requested.
         * @param {string} clientId The client ID of the application.
         * @param {string} clientSecret The client secret of the application.
         * @param {string} [scope] The scopes that the token has access to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthV2TokenPost(grantType: string, clientId: string, clientSecret: string, scope?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OAuth>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthV2TokenPost(grantType, clientId, clientSecret, scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Oauth2Api - factory interface
 * @export
 */
export const Oauth2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Oauth2ApiFp(configuration)
    return {
        /**
         * Issues an access token to access the resources of a user. The access token is valid for 25 hours. The \"client_credentials\", “authorization_code” and “refresh_token” grant types are currently supported. The client makes a request by adding the following parameters using the \"application/x-www-form-urlencoded\" content type. The request-body is using parameters, but the HTTP response is using the \"application/json\" media type. 
         * @summary Obtain an OAuth 2 access token.
         * @param {string} grantType The OAuth 2 grant type requested.
         * @param {string} clientId The client ID of the application.
         * @param {string} clientSecret The client secret of the application.
         * @param {string} [scope] The scopes that the token has access to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthV2TokenPost(grantType: string, clientId: string, clientSecret: string, scope?: string, options?: any): AxiosPromise<Array<OAuth>> {
            return localVarFp.oauthV2TokenPost(grantType, clientId, clientSecret, scope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Oauth2Api - object-oriented interface
 * @export
 * @class Oauth2Api
 * @extends {BaseAPI}
 */
export class Oauth2Api extends BaseAPI {
    /**
     * Issues an access token to access the resources of a user. The access token is valid for 25 hours. The \"client_credentials\", “authorization_code” and “refresh_token” grant types are currently supported. The client makes a request by adding the following parameters using the \"application/x-www-form-urlencoded\" content type. The request-body is using parameters, but the HTTP response is using the \"application/json\" media type. 
     * @summary Obtain an OAuth 2 access token.
     * @param {string} grantType The OAuth 2 grant type requested.
     * @param {string} clientId The client ID of the application.
     * @param {string} clientSecret The client secret of the application.
     * @param {string} [scope] The scopes that the token has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public oauthV2TokenPost(grantType: string, clientId: string, clientSecret: string, scope?: string, options?: AxiosRequestConfig) {
        return Oauth2ApiFp(this.configuration).oauthV2TokenPost(grantType, clientId, clientSecret, scope, options).then((request) => request(this.axios, this.basePath));
    }
}


