/* tslint:disable */
/* eslint-disable */
/**
 * Matches
 * The Toornament platform connects your website and application with the eSports tournaments around the world.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: contact@toornament.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Match
 */
export interface Match {
    /**
     * Settings that describe the various options related to the match.
     * @type {object}
     * @memberof Match
     */
    'settings': object;
    /**
     * The scheduled date of the match in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof Match
     */
    'scheduled_datetime': string | null;
    /**
     * Public note of a match, written by the organizer.
     * @type {string}
     * @memberof Match
     */
    'public_note': string | null;
    /**
     * Private note of a match, written by the organizer.
     * @type {string}
     * @memberof Match
     */
    'private_note': string | null;
    /**
     * The id of the match.
     * @type {string}
     * @memberof Match
     */
    'id': string;
    /**
     * The status of the match.
     * @type {string}
     * @memberof Match
     */
    'status': MatchStatusEnum;
    /**
     * The id of the stage that contains this match.
     * @type {string}
     * @memberof Match
     */
    'stage_id': string;
    /**
     * The id of the group that contains this match.
     * @type {string}
     * @memberof Match
     */
    'group_id': string;
    /**
     * The id of the round that contains this match.
     * @type {string}
     * @memberof Match
     */
    'round_id': string | null;
    /**
     * The match number (a relative identifier within a round).
     * @type {number}
     * @memberof Match
     */
    'number': number;
    /**
     * The match type.
     * @type {string}
     * @memberof Match
     */
    'type': MatchTypeEnum;
    /**
     * The date and time when the match was completed (a result was provided).
     * @type {string}
     * @memberof Match
     */
    'played_at': string | null;
    /**
     * Whether the match report is closed.
     * @type {boolean}
     * @memberof Match
     */
    'report_closed': boolean;
    /**
     * The report status.
     * @type {string}
     * @memberof Match
     */
    'report_status': MatchReportStatusEnum;
    /**
     * List of the opponents involved in this match.
     * @type {Array<Opponent>}
     * @memberof Match
     */
    'opponents': Array<Opponent>;
}

export const MatchStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchStatusEnum = typeof MatchStatusEnum[keyof typeof MatchStatusEnum];
export const MatchTypeEnum = {
    Duel: 'duel',
    Ffa: 'ffa',
    Bye: 'bye'
} as const;

export type MatchTypeEnum = typeof MatchTypeEnum[keyof typeof MatchTypeEnum];
export const MatchReportStatusEnum = {
    Report: 'report',
    Dispute: 'dispute'
} as const;

export type MatchReportStatusEnum = typeof MatchReportStatusEnum[keyof typeof MatchReportStatusEnum];

/**
 * 
 * @export
 * @interface MatchAllOf
 */
export interface MatchAllOf {
    /**
     * The id of the match.
     * @type {string}
     * @memberof MatchAllOf
     */
    'id': string;
    /**
     * The status of the match.
     * @type {string}
     * @memberof MatchAllOf
     */
    'status': MatchAllOfStatusEnum;
    /**
     * The id of the stage that contains this match.
     * @type {string}
     * @memberof MatchAllOf
     */
    'stage_id': string;
    /**
     * The id of the group that contains this match.
     * @type {string}
     * @memberof MatchAllOf
     */
    'group_id': string;
    /**
     * The id of the round that contains this match.
     * @type {string}
     * @memberof MatchAllOf
     */
    'round_id': string | null;
    /**
     * The match number (a relative identifier within a round).
     * @type {number}
     * @memberof MatchAllOf
     */
    'number': number;
    /**
     * The match type.
     * @type {string}
     * @memberof MatchAllOf
     */
    'type': MatchAllOfTypeEnum;
    /**
     * The date and time when the match was completed (a result was provided).
     * @type {string}
     * @memberof MatchAllOf
     */
    'played_at': string | null;
    /**
     * Whether the match report is closed.
     * @type {boolean}
     * @memberof MatchAllOf
     */
    'report_closed': boolean;
    /**
     * The report status.
     * @type {string}
     * @memberof MatchAllOf
     */
    'report_status': MatchAllOfReportStatusEnum;
    /**
     * List of the opponents involved in this match.
     * @type {Array<Opponent>}
     * @memberof MatchAllOf
     */
    'opponents': Array<Opponent>;
}

export const MatchAllOfStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchAllOfStatusEnum = typeof MatchAllOfStatusEnum[keyof typeof MatchAllOfStatusEnum];
export const MatchAllOfTypeEnum = {
    Duel: 'duel',
    Ffa: 'ffa',
    Bye: 'bye'
} as const;

export type MatchAllOfTypeEnum = typeof MatchAllOfTypeEnum[keyof typeof MatchAllOfTypeEnum];
export const MatchAllOfReportStatusEnum = {
    Report: 'report',
    Dispute: 'dispute'
} as const;

export type MatchAllOfReportStatusEnum = typeof MatchAllOfReportStatusEnum[keyof typeof MatchAllOfReportStatusEnum];

/**
 * 
 * @export
 * @interface MatchBase
 */
export interface MatchBase {
    /**
     * Settings that describe the various options related to the match.
     * @type {object}
     * @memberof MatchBase
     */
    'settings'?: object;
    /**
     * The scheduled date of the match in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof MatchBase
     */
    'scheduled_datetime'?: string | null;
    /**
     * Public note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchBase
     */
    'public_note'?: string | null;
    /**
     * Private note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchBase
     */
    'private_note'?: string | null;
}
/**
 * 
 * @export
 * @interface MatchDetailed
 */
export interface MatchDetailed {
    /**
     * Settings that describe the various options related to the match.
     * @type {object}
     * @memberof MatchDetailed
     */
    'settings': object;
    /**
     * The scheduled date of the match in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof MatchDetailed
     */
    'scheduled_datetime': string | null;
    /**
     * Public note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchDetailed
     */
    'public_note': string | null;
    /**
     * Private note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchDetailed
     */
    'private_note': string | null;
    /**
     * The id of the match.
     * @type {string}
     * @memberof MatchDetailed
     */
    'id': string;
    /**
     * The status of the match.
     * @type {string}
     * @memberof MatchDetailed
     */
    'status': MatchDetailedStatusEnum;
    /**
     * The id of the stage that contains this match.
     * @type {string}
     * @memberof MatchDetailed
     */
    'stage_id': string;
    /**
     * The id of the group that contains this match.
     * @type {string}
     * @memberof MatchDetailed
     */
    'group_id': string;
    /**
     * The id of the round that contains this match.
     * @type {string}
     * @memberof MatchDetailed
     */
    'round_id': string | null;
    /**
     * The match number (a relative identifier within a round).
     * @type {number}
     * @memberof MatchDetailed
     */
    'number': number;
    /**
     * The match type.
     * @type {string}
     * @memberof MatchDetailed
     */
    'type': MatchDetailedTypeEnum;
    /**
     * The date and time when the match was completed (a result was provided).
     * @type {string}
     * @memberof MatchDetailed
     */
    'played_at': string | null;
    /**
     * Whether the match report is closed.
     * @type {boolean}
     * @memberof MatchDetailed
     */
    'report_closed': boolean;
    /**
     * The report status.
     * @type {string}
     * @memberof MatchDetailed
     */
    'report_status': MatchDetailedReportStatusEnum;
    /**
     * List of the opponents involved in this match.
     * @type {Array<OpponentDetailed>}
     * @memberof MatchDetailed
     */
    'opponents': Array<OpponentDetailed>;
}

export const MatchDetailedStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchDetailedStatusEnum = typeof MatchDetailedStatusEnum[keyof typeof MatchDetailedStatusEnum];
export const MatchDetailedTypeEnum = {
    Duel: 'duel',
    Ffa: 'ffa',
    Bye: 'bye'
} as const;

export type MatchDetailedTypeEnum = typeof MatchDetailedTypeEnum[keyof typeof MatchDetailedTypeEnum];
export const MatchDetailedReportStatusEnum = {
    Report: 'report',
    Dispute: 'dispute'
} as const;

export type MatchDetailedReportStatusEnum = typeof MatchDetailedReportStatusEnum[keyof typeof MatchDetailedReportStatusEnum];

/**
 * 
 * @export
 * @interface MatchDetailedAllOf
 */
export interface MatchDetailedAllOf {
    /**
     * List of the opponents involved in this match.
     * @type {Array<OpponentDetailed>}
     * @memberof MatchDetailedAllOf
     */
    'opponents'?: Array<OpponentDetailed>;
}
/**
 * 
 * @export
 * @interface MatchDetailedFully
 */
export interface MatchDetailedFully {
    /**
     * Settings that describe the various options related to the match.
     * @type {object}
     * @memberof MatchDetailedFully
     */
    'settings': object;
    /**
     * The scheduled date of the match in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'scheduled_datetime': string | null;
    /**
     * Public note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'public_note': string | null;
    /**
     * Private note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'private_note': string | null;
    /**
     * The id of the match.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'id': string;
    /**
     * The status of the match.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'status': MatchDetailedFullyStatusEnum;
    /**
     * The id of the stage that contains this match.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'stage_id': string;
    /**
     * The id of the group that contains this match.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'group_id': string;
    /**
     * The id of the round that contains this match.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'round_id': string | null;
    /**
     * The match number (a relative identifier within a round).
     * @type {number}
     * @memberof MatchDetailedFully
     */
    'number': number;
    /**
     * The match type.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'type': MatchDetailedFullyTypeEnum;
    /**
     * The date and time when the match was completed (a result was provided).
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'played_at': string | null;
    /**
     * Whether the match report is closed.
     * @type {boolean}
     * @memberof MatchDetailedFully
     */
    'report_closed': boolean;
    /**
     * The report status.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'report_status': MatchDetailedFullyReportStatusEnum;
    /**
     * List of the opponents involved in this match.
     * @type {Array<OpponentDetailed>}
     * @memberof MatchDetailedFully
     */
    'opponents': Array<OpponentDetailed>;
    /**
     * The id of the tournament that contains this match.
     * @type {string}
     * @memberof MatchDetailedFully
     */
    'tournament_id': string;
}

export const MatchDetailedFullyStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchDetailedFullyStatusEnum = typeof MatchDetailedFullyStatusEnum[keyof typeof MatchDetailedFullyStatusEnum];
export const MatchDetailedFullyTypeEnum = {
    Duel: 'duel',
    Ffa: 'ffa',
    Bye: 'bye'
} as const;

export type MatchDetailedFullyTypeEnum = typeof MatchDetailedFullyTypeEnum[keyof typeof MatchDetailedFullyTypeEnum];
export const MatchDetailedFullyReportStatusEnum = {
    Report: 'report',
    Dispute: 'dispute'
} as const;

export type MatchDetailedFullyReportStatusEnum = typeof MatchDetailedFullyReportStatusEnum[keyof typeof MatchDetailedFullyReportStatusEnum];

/**
 * 
 * @export
 * @interface MatchFully
 */
export interface MatchFully {
    /**
     * Settings that describe the various options related to the match.
     * @type {object}
     * @memberof MatchFully
     */
    'settings': object;
    /**
     * The scheduled date of the match in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof MatchFully
     */
    'scheduled_datetime': string | null;
    /**
     * Public note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchFully
     */
    'public_note': string | null;
    /**
     * Private note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchFully
     */
    'private_note': string | null;
    /**
     * The id of the match.
     * @type {string}
     * @memberof MatchFully
     */
    'id': string;
    /**
     * The status of the match.
     * @type {string}
     * @memberof MatchFully
     */
    'status': MatchFullyStatusEnum;
    /**
     * The id of the stage that contains this match.
     * @type {string}
     * @memberof MatchFully
     */
    'stage_id': string;
    /**
     * The id of the group that contains this match.
     * @type {string}
     * @memberof MatchFully
     */
    'group_id': string;
    /**
     * The id of the round that contains this match.
     * @type {string}
     * @memberof MatchFully
     */
    'round_id': string | null;
    /**
     * The match number (a relative identifier within a round).
     * @type {number}
     * @memberof MatchFully
     */
    'number': number;
    /**
     * The match type.
     * @type {string}
     * @memberof MatchFully
     */
    'type': MatchFullyTypeEnum;
    /**
     * The date and time when the match was completed (a result was provided).
     * @type {string}
     * @memberof MatchFully
     */
    'played_at': string | null;
    /**
     * Whether the match report is closed.
     * @type {boolean}
     * @memberof MatchFully
     */
    'report_closed': boolean;
    /**
     * The report status.
     * @type {string}
     * @memberof MatchFully
     */
    'report_status': MatchFullyReportStatusEnum;
    /**
     * List of the opponents involved in this match.
     * @type {Array<Opponent>}
     * @memberof MatchFully
     */
    'opponents': Array<Opponent>;
    /**
     * The id of the tournament that contains this match.
     * @type {string}
     * @memberof MatchFully
     */
    'tournament_id': string;
}

export const MatchFullyStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchFullyStatusEnum = typeof MatchFullyStatusEnum[keyof typeof MatchFullyStatusEnum];
export const MatchFullyTypeEnum = {
    Duel: 'duel',
    Ffa: 'ffa',
    Bye: 'bye'
} as const;

export type MatchFullyTypeEnum = typeof MatchFullyTypeEnum[keyof typeof MatchFullyTypeEnum];
export const MatchFullyReportStatusEnum = {
    Report: 'report',
    Dispute: 'dispute'
} as const;

export type MatchFullyReportStatusEnum = typeof MatchFullyReportStatusEnum[keyof typeof MatchFullyReportStatusEnum];

/**
 * 
 * @export
 * @interface MatchFullyAllOf
 */
export interface MatchFullyAllOf {
    /**
     * The id of the tournament that contains this match.
     * @type {string}
     * @memberof MatchFullyAllOf
     */
    'tournament_id': string;
}
/**
 * 
 * @export
 * @interface MatchUpdate
 */
export interface MatchUpdate {
    /**
     * Settings that describe the various options related to the match.
     * @type {object}
     * @memberof MatchUpdate
     */
    'settings'?: object;
    /**
     * The scheduled date of the match in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof MatchUpdate
     */
    'scheduled_datetime'?: string | null;
    /**
     * Public note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchUpdate
     */
    'public_note'?: string | null;
    /**
     * Private note of a match, written by the organizer.
     * @type {string}
     * @memberof MatchUpdate
     */
    'private_note'?: string | null;
    /**
     * List of the opponents involved in this match.
     * @type {Array<OpponentUpdate>}
     * @memberof MatchUpdate
     */
    'opponents'?: Array<OpponentUpdate>;
}
/**
 * 
 * @export
 * @interface MatchUpdateAllOf
 */
export interface MatchUpdateAllOf {
    /**
     * List of the opponents involved in this match.
     * @type {Array<OpponentUpdate>}
     * @memberof MatchUpdateAllOf
     */
    'opponents'?: Array<OpponentUpdate>;
}
/**
 * 
 * @export
 * @interface Opponent
 */
export interface Opponent {
    /**
     * The match opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof Opponent
     */
    'number': number;
    /**
     * The match opponent position (calculate by internal processes).
     * @type {number}
     * @memberof Opponent
     */
    'position': number;
    /**
     * The match result of the opponent.
     * @type {string}
     * @memberof Opponent
     */
    'result': OpponentResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof Opponent
     */
    'rank': number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof Opponent
     */
    'forfeit': boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof Opponent
     */
    'score': number | null;
    /**
     * 
     * @type {Participant & object}
     * @memberof Opponent
     */
    'participant': Participant & object;
}

export const OpponentResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type OpponentResultEnum = typeof OpponentResultEnum[keyof typeof OpponentResultEnum];

/**
 * 
 * @export
 * @interface OpponentAllOf
 */
export interface OpponentAllOf {
    /**
     * 
     * @type {Participant & object}
     * @memberof OpponentAllOf
     */
    'participant': Participant & object;
}
/**
 * 
 * @export
 * @interface OpponentBase
 */
export interface OpponentBase {
    /**
     * The match opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof OpponentBase
     */
    'number'?: number;
    /**
     * The match opponent position (calculate by internal processes).
     * @type {number}
     * @memberof OpponentBase
     */
    'position'?: number;
    /**
     * The match result of the opponent.
     * @type {string}
     * @memberof OpponentBase
     */
    'result'?: OpponentBaseResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof OpponentBase
     */
    'rank'?: number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof OpponentBase
     */
    'forfeit'?: boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof OpponentBase
     */
    'score'?: number | null;
}

export const OpponentBaseResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type OpponentBaseResultEnum = typeof OpponentBaseResultEnum[keyof typeof OpponentBaseResultEnum];

/**
 * 
 * @export
 * @interface OpponentDetailed
 */
export interface OpponentDetailed {
    /**
     * The match opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof OpponentDetailed
     */
    'number': number;
    /**
     * The match opponent position (calculate by internal processes).
     * @type {number}
     * @memberof OpponentDetailed
     */
    'position': number;
    /**
     * The match result of the opponent.
     * @type {string}
     * @memberof OpponentDetailed
     */
    'result': OpponentDetailedResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof OpponentDetailed
     */
    'rank': number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof OpponentDetailed
     */
    'forfeit': boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof OpponentDetailed
     */
    'score': number | null;
    /**
     * 
     * @type {Participant & object}
     * @memberof OpponentDetailed
     */
    'participant': Participant & object;
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof OpponentDetailed
     */
    'properties': object;
}

export const OpponentDetailedResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type OpponentDetailedResultEnum = typeof OpponentDetailedResultEnum[keyof typeof OpponentDetailedResultEnum];

/**
 * 
 * @export
 * @interface OpponentDetailedAllOf
 */
export interface OpponentDetailedAllOf {
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof OpponentDetailedAllOf
     */
    'properties': object;
}
/**
 * 
 * @export
 * @interface OpponentUpdate
 */
export interface OpponentUpdate {
    /**
     * The match opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof OpponentUpdate
     */
    'number'?: number;
    /**
     * The match opponent position (calculate by internal processes).
     * @type {number}
     * @memberof OpponentUpdate
     */
    'position'?: number;
    /**
     * The match result of the opponent.
     * @type {string}
     * @memberof OpponentUpdate
     */
    'result'?: OpponentUpdateResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof OpponentUpdate
     */
    'rank'?: number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof OpponentUpdate
     */
    'forfeit'?: boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof OpponentUpdate
     */
    'score'?: number | null;
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof OpponentUpdate
     */
    'properties'?: object;
}

export const OpponentUpdateResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type OpponentUpdateResultEnum = typeof OpponentUpdateResultEnum[keyof typeof OpponentUpdateResultEnum];

/**
 * 
 * @export
 * @interface OpponentUpdateAllOf
 */
export interface OpponentUpdateAllOf {
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof OpponentUpdateAllOf
     */
    'properties'?: object;
}
/**
 * 
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * The id of the participant.
     * @type {string}
     * @memberof Participant
     */
    'id': string;
    /**
     * The name of the participant.
     * @type {string}
     * @memberof Participant
     */
    'name': string;
    /**
     * An external custom user identifier. Use the format that suits your needs.
     * @type {string}
     * @memberof Participant
     */
    'custom_user_identifier': string | null;
    /**
     * The values of the custom fields configured in the tournament using the machine names as keys. For more information, please read the [Custom Fields](https://developer.toornament.com/v2/core-concepts/custom-fields) documentation.
     * @type {object}
     * @memberof Participant
     */
    'custom_fields': object;
}

/**
 * OrganizerMatchesApi - axios parameter creator
 * @export
 */
export const OrganizerMatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the matches of all your tournaments using various filters. If the match type is \"ffa\", the opponents are limited by the first 4 ordered by their position.
         * @summary Retrieves all matches of all your tournaments.
         * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
         * @param {Array<string>} [stageIds] One or several stage ids to filter.
         * @param {Array<number>} [stageNumbers] One or several stage numbers to filter.
         * @param {Array<string>} [groupIds] One or several group ids to filter.
         * @param {Array<number>} [groupNumbers] One or several group numbers to filter.
         * @param {Array<string>} [roundIds] One or several round ids to filter.
         * @param {Array<number>} [roundNumbers] One or several round numbers to filter.
         * @param {Array<string>} [statuses] One or several match statuses to filter.
         * @param {boolean} [isScheduled] Whether to include scheduled matches.
         * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [playedBefore] A datetime to include all matches played before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [playedAfter] A datetime to include all matches played after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {Array<string>} [disciplines] Only return matches for the tournaments with the discipline.
         * @param {Array<string>} [tournamentIds] Only return matches for the given list of tournaments.
         * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
         * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
         * @param {Array<string>} [matchIds] Only return matches for the given list of ids.
         * @param {Array<string>} [circuitIds] Only return circuits for the given list of ids.
         * @param {string} [circuitSeasons] One or several machine name of seasons to filter.
         * @param {string} [circuitRegions] One or several machine name of regions to filter.
         * @param {string} [circuitTiers] One or several machine name of tiers to filter.
         * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesGet: async (range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, playedBefore?: string, playedAfter?: string, disciplines?: Array<string>, tournamentIds?: Array<string>, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, matchIds?: Array<string>, circuitIds?: Array<string>, circuitSeasons?: string, circuitRegions?: string, circuitTiers?: string, sort?: 'structure' | 'schedule' | 'latest_results', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'range' is not null or undefined
            assertParamExists('matchesGet', 'range', range)
            const localVarPath = `/matches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            if (stageIds) {
                localVarQueryParameter['stage_ids'] = stageIds.join(COLLECTION_FORMATS.csv);
            }

            if (stageNumbers) {
                localVarQueryParameter['stage_numbers'] = stageNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (groupIds) {
                localVarQueryParameter['group_ids'] = groupIds.join(COLLECTION_FORMATS.csv);
            }

            if (groupNumbers) {
                localVarQueryParameter['group_numbers'] = groupNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (roundIds) {
                localVarQueryParameter['round_ids'] = roundIds.join(COLLECTION_FORMATS.csv);
            }

            if (roundNumbers) {
                localVarQueryParameter['round_numbers'] = roundNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses.join(COLLECTION_FORMATS.csv);
            }

            if (isScheduled !== undefined) {
                localVarQueryParameter['is_scheduled'] = isScheduled;
            }

            if (scheduledBefore !== undefined) {
                localVarQueryParameter['scheduled_before'] = scheduledBefore;
            }

            if (scheduledAfter !== undefined) {
                localVarQueryParameter['scheduled_after'] = scheduledAfter;
            }

            if (playedBefore !== undefined) {
                localVarQueryParameter['played_before'] = playedBefore;
            }

            if (playedAfter !== undefined) {
                localVarQueryParameter['played_after'] = playedAfter;
            }

            if (disciplines) {
                localVarQueryParameter['disciplines'] = disciplines.join(COLLECTION_FORMATS.csv);
            }

            if (tournamentIds) {
                localVarQueryParameter['tournament_ids'] = tournamentIds.join(COLLECTION_FORMATS.csv);
            }

            if (participantIds) {
                localVarQueryParameter['participant_ids'] = participantIds.join(COLLECTION_FORMATS.csv);
            }

            if (customUserIdentifiers) {
                localVarQueryParameter['custom_user_identifiers'] = customUserIdentifiers.join(COLLECTION_FORMATS.csv);
            }

            if (matchIds) {
                localVarQueryParameter['match_ids'] = matchIds.join(COLLECTION_FORMATS.csv);
            }

            if (circuitIds) {
                localVarQueryParameter['circuit_ids'] = circuitIds.join(COLLECTION_FORMATS.csv);
            }

            if (circuitSeasons !== undefined) {
                localVarQueryParameter['circuit_seasons'] = circuitSeasons;
            }

            if (circuitRegions !== undefined) {
                localVarQueryParameter['circuit_regions'] = circuitRegions;
            }

            if (circuitTiers !== undefined) {
                localVarQueryParameter['circuit_tiers'] = circuitTiers;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a match identified by the given id. If the match type is \"ffa\", a match returns a maximum of 100 opponents.
         * @summary Retrieves a match.
         * @param {string} id The id of the requested match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('matchesIdGet', 'id', id)
            const localVarPath = `/matches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates information and detailed outcome of a match identified by the given id.
         * @summary Updates information and outcome of a match.
         * @param {string} id The id of the requested match.
         * @param {MatchUpdate} [matchUpdate] Update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesIdPatch: async (id: string, matchUpdate?: MatchUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('matchesIdPatch', 'id', id)
            const localVarPath = `/matches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the matches from the tournament. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each match.
         * @summary Retrieve the matches of a tournament.
         * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {Array<string>} [stageIds] One or several stage ids to filter.
         * @param {Array<string>} [groupIds] One or several group ids to filter.
         * @param {Array<string>} [roundIds] One or several round ids to filter.
         * @param {Array<string>} [statuses] One or several match statuses to filter.
         * @param {boolean} [isScheduled] Whether to include scheduled matches.
         * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
         * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
         * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesGet: async (range: string, tournamentId: string, stageIds?: Array<string>, groupIds?: Array<string>, roundIds?: Array<string>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, sort?: 'structure' | 'schedule' | 'latest_results', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'range' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesGet', 'range', range)
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesGet', 'tournamentId', tournamentId)
            const localVarPath = `/tournaments/{tournament_id}/matches`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            if (stageIds) {
                localVarQueryParameter['stage_ids'] = stageIds.join(COLLECTION_FORMATS.csv);
            }

            if (groupIds) {
                localVarQueryParameter['group_ids'] = groupIds.join(COLLECTION_FORMATS.csv);
            }

            if (roundIds) {
                localVarQueryParameter['round_ids'] = roundIds.join(COLLECTION_FORMATS.csv);
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses.join(COLLECTION_FORMATS.csv);
            }

            if (isScheduled !== undefined) {
                localVarQueryParameter['is_scheduled'] = isScheduled;
            }

            if (scheduledBefore !== undefined) {
                localVarQueryParameter['scheduled_before'] = scheduledBefore;
            }

            if (scheduledAfter !== undefined) {
                localVarQueryParameter['scheduled_after'] = scheduledAfter;
            }

            if (participantIds) {
                localVarQueryParameter['participant_ids'] = participantIds.join(COLLECTION_FORMATS.csv);
            }

            if (customUserIdentifiers) {
                localVarQueryParameter['custom_user_identifiers'] = customUserIdentifiers.join(COLLECTION_FORMATS.csv);
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the match with the given id. A match is limited to 2 participants in “duel” type, and 100 participants in “ffa” type.
         * @summary Retrieves a match of a tournament.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the requested match.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesIdGet: async (tournamentId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesIdGet', 'tournamentId', tournamentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesIdGet', 'id', id)
            const localVarPath = `/tournaments/{tournament_id}/matches/{id}`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates information and detailed outcome of a match.
         * @summary Update information and outcome of a match.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the requested match.
         * @param {MatchUpdate} [matchUpdate] Update data
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesIdPatch: async (tournamentId: string, id: string, matchUpdate?: MatchUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesIdPatch', 'tournamentId', tournamentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesIdPatch', 'id', id)
            const localVarPath = `/tournaments/{tournament_id}/matches/{id}`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizerMatchesApi - functional programming interface
 * @export
 */
export const OrganizerMatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizerMatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the matches of all your tournaments using various filters. If the match type is \"ffa\", the opponents are limited by the first 4 ordered by their position.
         * @summary Retrieves all matches of all your tournaments.
         * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
         * @param {Array<string>} [stageIds] One or several stage ids to filter.
         * @param {Array<number>} [stageNumbers] One or several stage numbers to filter.
         * @param {Array<string>} [groupIds] One or several group ids to filter.
         * @param {Array<number>} [groupNumbers] One or several group numbers to filter.
         * @param {Array<string>} [roundIds] One or several round ids to filter.
         * @param {Array<number>} [roundNumbers] One or several round numbers to filter.
         * @param {Array<string>} [statuses] One or several match statuses to filter.
         * @param {boolean} [isScheduled] Whether to include scheduled matches.
         * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [playedBefore] A datetime to include all matches played before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [playedAfter] A datetime to include all matches played after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {Array<string>} [disciplines] Only return matches for the tournaments with the discipline.
         * @param {Array<string>} [tournamentIds] Only return matches for the given list of tournaments.
         * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
         * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
         * @param {Array<string>} [matchIds] Only return matches for the given list of ids.
         * @param {Array<string>} [circuitIds] Only return circuits for the given list of ids.
         * @param {string} [circuitSeasons] One or several machine name of seasons to filter.
         * @param {string} [circuitRegions] One or several machine name of regions to filter.
         * @param {string} [circuitTiers] One or several machine name of tiers to filter.
         * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesGet(range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, playedBefore?: string, playedAfter?: string, disciplines?: Array<string>, tournamentIds?: Array<string>, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, matchIds?: Array<string>, circuitIds?: Array<string>, circuitSeasons?: string, circuitRegions?: string, circuitTiers?: string, sort?: 'structure' | 'schedule' | 'latest_results', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchFully>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchesGet(range, stageIds, stageNumbers, groupIds, groupNumbers, roundIds, roundNumbers, statuses, isScheduled, scheduledBefore, scheduledAfter, playedBefore, playedAfter, disciplines, tournamentIds, participantIds, customUserIdentifiers, matchIds, circuitIds, circuitSeasons, circuitRegions, circuitTiers, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a match identified by the given id. If the match type is \"ffa\", a match returns a maximum of 100 opponents.
         * @summary Retrieves a match.
         * @param {string} id The id of the requested match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchDetailedFully>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates information and detailed outcome of a match identified by the given id.
         * @summary Updates information and outcome of a match.
         * @param {string} id The id of the requested match.
         * @param {MatchUpdate} [matchUpdate] Update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesIdPatch(id: string, matchUpdate?: MatchUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchDetailedFully>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchesIdPatch(id, matchUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the matches from the tournament. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each match.
         * @summary Retrieve the matches of a tournament.
         * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {Array<string>} [stageIds] One or several stage ids to filter.
         * @param {Array<string>} [groupIds] One or several group ids to filter.
         * @param {Array<string>} [roundIds] One or several round ids to filter.
         * @param {Array<string>} [statuses] One or several match statuses to filter.
         * @param {boolean} [isScheduled] Whether to include scheduled matches.
         * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
         * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
         * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdMatchesGet(range: string, tournamentId: string, stageIds?: Array<string>, groupIds?: Array<string>, roundIds?: Array<string>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, sort?: 'structure' | 'schedule' | 'latest_results', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Match>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdMatchesGet(range, tournamentId, stageIds, groupIds, roundIds, statuses, isScheduled, scheduledBefore, scheduledAfter, participantIds, customUserIdentifiers, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the match with the given id. A match is limited to 2 participants in “duel” type, and 100 participants in “ffa” type.
         * @summary Retrieves a match of a tournament.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the requested match.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdMatchesIdGet(tournamentId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchDetailed>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdMatchesIdGet(tournamentId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates information and detailed outcome of a match.
         * @summary Update information and outcome of a match.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the requested match.
         * @param {MatchUpdate} [matchUpdate] Update data
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdMatchesIdPatch(tournamentId: string, id: string, matchUpdate?: MatchUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchDetailed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdMatchesIdPatch(tournamentId, id, matchUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizerMatchesApi - factory interface
 * @export
 */
export const OrganizerMatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizerMatchesApiFp(configuration)
    return {
        /**
         * Retrieves the matches of all your tournaments using various filters. If the match type is \"ffa\", the opponents are limited by the first 4 ordered by their position.
         * @summary Retrieves all matches of all your tournaments.
         * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
         * @param {Array<string>} [stageIds] One or several stage ids to filter.
         * @param {Array<number>} [stageNumbers] One or several stage numbers to filter.
         * @param {Array<string>} [groupIds] One or several group ids to filter.
         * @param {Array<number>} [groupNumbers] One or several group numbers to filter.
         * @param {Array<string>} [roundIds] One or several round ids to filter.
         * @param {Array<number>} [roundNumbers] One or several round numbers to filter.
         * @param {Array<string>} [statuses] One or several match statuses to filter.
         * @param {boolean} [isScheduled] Whether to include scheduled matches.
         * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [playedBefore] A datetime to include all matches played before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [playedAfter] A datetime to include all matches played after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {Array<string>} [disciplines] Only return matches for the tournaments with the discipline.
         * @param {Array<string>} [tournamentIds] Only return matches for the given list of tournaments.
         * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
         * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
         * @param {Array<string>} [matchIds] Only return matches for the given list of ids.
         * @param {Array<string>} [circuitIds] Only return circuits for the given list of ids.
         * @param {string} [circuitSeasons] One or several machine name of seasons to filter.
         * @param {string} [circuitRegions] One or several machine name of regions to filter.
         * @param {string} [circuitTiers] One or several machine name of tiers to filter.
         * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesGet(range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, playedBefore?: string, playedAfter?: string, disciplines?: Array<string>, tournamentIds?: Array<string>, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, matchIds?: Array<string>, circuitIds?: Array<string>, circuitSeasons?: string, circuitRegions?: string, circuitTiers?: string, sort?: 'structure' | 'schedule' | 'latest_results', options?: any): AxiosPromise<Array<MatchFully>> {
            return localVarFp.matchesGet(range, stageIds, stageNumbers, groupIds, groupNumbers, roundIds, roundNumbers, statuses, isScheduled, scheduledBefore, scheduledAfter, playedBefore, playedAfter, disciplines, tournamentIds, participantIds, customUserIdentifiers, matchIds, circuitIds, circuitSeasons, circuitRegions, circuitTiers, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a match identified by the given id. If the match type is \"ffa\", a match returns a maximum of 100 opponents.
         * @summary Retrieves a match.
         * @param {string} id The id of the requested match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesIdGet(id: string, options?: any): AxiosPromise<MatchDetailedFully> {
            return localVarFp.matchesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates information and detailed outcome of a match identified by the given id.
         * @summary Updates information and outcome of a match.
         * @param {string} id The id of the requested match.
         * @param {MatchUpdate} [matchUpdate] Update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesIdPatch(id: string, matchUpdate?: MatchUpdate, options?: any): AxiosPromise<MatchDetailedFully> {
            return localVarFp.matchesIdPatch(id, matchUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the matches from the tournament. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each match.
         * @summary Retrieve the matches of a tournament.
         * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {Array<string>} [stageIds] One or several stage ids to filter.
         * @param {Array<string>} [groupIds] One or several group ids to filter.
         * @param {Array<string>} [roundIds] One or several round ids to filter.
         * @param {Array<string>} [statuses] One or several match statuses to filter.
         * @param {boolean} [isScheduled] Whether to include scheduled matches.
         * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
         * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
         * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
         * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesGet(range: string, tournamentId: string, stageIds?: Array<string>, groupIds?: Array<string>, roundIds?: Array<string>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, sort?: 'structure' | 'schedule' | 'latest_results', options?: any): AxiosPromise<Array<Match>> {
            return localVarFp.tournamentsTournamentIdMatchesGet(range, tournamentId, stageIds, groupIds, roundIds, statuses, isScheduled, scheduledBefore, scheduledAfter, participantIds, customUserIdentifiers, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the match with the given id. A match is limited to 2 participants in “duel” type, and 100 participants in “ffa” type.
         * @summary Retrieves a match of a tournament.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the requested match.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesIdGet(tournamentId: string, id: string, options?: any): AxiosPromise<Array<MatchDetailed>> {
            return localVarFp.tournamentsTournamentIdMatchesIdGet(tournamentId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates information and detailed outcome of a match.
         * @summary Update information and outcome of a match.
         * @param {string} tournamentId The id of the tournament you want to retrieve data about.
         * @param {string} id The id of the requested match.
         * @param {MatchUpdate} [matchUpdate] Update data
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesIdPatch(tournamentId: string, id: string, matchUpdate?: MatchUpdate, options?: any): AxiosPromise<MatchDetailed> {
            return localVarFp.tournamentsTournamentIdMatchesIdPatch(tournamentId, id, matchUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizerMatchesApi - object-oriented interface
 * @export
 * @class OrganizerMatchesApi
 * @extends {BaseAPI}
 */
export class OrganizerMatchesApi extends BaseAPI {
    /**
     * Retrieves the matches of all your tournaments using various filters. If the match type is \"ffa\", the opponents are limited by the first 4 ordered by their position.
     * @summary Retrieves all matches of all your tournaments.
     * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
     * @param {Array<string>} [stageIds] One or several stage ids to filter.
     * @param {Array<number>} [stageNumbers] One or several stage numbers to filter.
     * @param {Array<string>} [groupIds] One or several group ids to filter.
     * @param {Array<number>} [groupNumbers] One or several group numbers to filter.
     * @param {Array<string>} [roundIds] One or several round ids to filter.
     * @param {Array<number>} [roundNumbers] One or several round numbers to filter.
     * @param {Array<string>} [statuses] One or several match statuses to filter.
     * @param {boolean} [isScheduled] Whether to include scheduled matches.
     * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
     * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
     * @param {string} [playedBefore] A datetime to include all matches played before or at the datetime in RFC 3339 format (combined date, time and utc offset).
     * @param {string} [playedAfter] A datetime to include all matches played after or at the datetime in RFC 3339 format (combined date, time and utc offset).
     * @param {Array<string>} [disciplines] Only return matches for the tournaments with the discipline.
     * @param {Array<string>} [tournamentIds] Only return matches for the given list of tournaments.
     * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
     * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
     * @param {Array<string>} [matchIds] Only return matches for the given list of ids.
     * @param {Array<string>} [circuitIds] Only return circuits for the given list of ids.
     * @param {string} [circuitSeasons] One or several machine name of seasons to filter.
     * @param {string} [circuitRegions] One or several machine name of regions to filter.
     * @param {string} [circuitTiers] One or several machine name of tiers to filter.
     * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerMatchesApi
     */
    public matchesGet(range: string, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, playedBefore?: string, playedAfter?: string, disciplines?: Array<string>, tournamentIds?: Array<string>, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, matchIds?: Array<string>, circuitIds?: Array<string>, circuitSeasons?: string, circuitRegions?: string, circuitTiers?: string, sort?: 'structure' | 'schedule' | 'latest_results', options?: AxiosRequestConfig) {
        return OrganizerMatchesApiFp(this.configuration).matchesGet(range, stageIds, stageNumbers, groupIds, groupNumbers, roundIds, roundNumbers, statuses, isScheduled, scheduledBefore, scheduledAfter, playedBefore, playedAfter, disciplines, tournamentIds, participantIds, customUserIdentifiers, matchIds, circuitIds, circuitSeasons, circuitRegions, circuitTiers, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a match identified by the given id. If the match type is \"ffa\", a match returns a maximum of 100 opponents.
     * @summary Retrieves a match.
     * @param {string} id The id of the requested match.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerMatchesApi
     */
    public matchesIdGet(id: string, options?: AxiosRequestConfig) {
        return OrganizerMatchesApiFp(this.configuration).matchesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates information and detailed outcome of a match identified by the given id.
     * @summary Updates information and outcome of a match.
     * @param {string} id The id of the requested match.
     * @param {MatchUpdate} [matchUpdate] Update data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerMatchesApi
     */
    public matchesIdPatch(id: string, matchUpdate?: MatchUpdate, options?: AxiosRequestConfig) {
        return OrganizerMatchesApiFp(this.configuration).matchesIdPatch(id, matchUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the matches from the tournament. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each match.
     * @summary Retrieve the matches of a tournament.
     * @param {string} range A range of requested items using the \&#39;matches\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination)).
     * @param {string} tournamentId The id of the tournament you want to retrieve data about.
     * @param {Array<string>} [stageIds] One or several stage ids to filter.
     * @param {Array<string>} [groupIds] One or several group ids to filter.
     * @param {Array<string>} [roundIds] One or several round ids to filter.
     * @param {Array<string>} [statuses] One or several match statuses to filter.
     * @param {boolean} [isScheduled] Whether to include scheduled matches.
     * @param {string} [scheduledBefore] A datetime to include all matches scheduled before or at the datetime in RFC 3339 format (combined date, time and utc offset).
     * @param {string} [scheduledAfter] A datetime to include all matches scheduled after or at the datetime in RFC 3339 format (combined date, time and utc offset).
     * @param {Array<string>} [participantIds] One or several participant ids involved in the matches to filter.
     * @param {Array<string>} [customUserIdentifiers] A list of external custom user identifiers.
     * @param {'structure' | 'schedule' | 'latest_results'} [sort] A method to sort the filtered data. \&quot;structure\&quot; sorts using the stage, group, round and match numbers. \&quot;schedule\&quot; sorts using the scheduled date. \&quot;latest results\&quot; sorts using the date at which the matches were played (not scheduled).
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerMatchesApi
     */
    public tournamentsTournamentIdMatchesGet(range: string, tournamentId: string, stageIds?: Array<string>, groupIds?: Array<string>, roundIds?: Array<string>, statuses?: Array<string>, isScheduled?: boolean, scheduledBefore?: string, scheduledAfter?: string, participantIds?: Array<string>, customUserIdentifiers?: Array<string>, sort?: 'structure' | 'schedule' | 'latest_results', options?: AxiosRequestConfig) {
        return OrganizerMatchesApiFp(this.configuration).tournamentsTournamentIdMatchesGet(range, tournamentId, stageIds, groupIds, roundIds, statuses, isScheduled, scheduledBefore, scheduledAfter, participantIds, customUserIdentifiers, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the match with the given id. A match is limited to 2 participants in “duel” type, and 100 participants in “ffa” type.
     * @summary Retrieves a match of a tournament.
     * @param {string} tournamentId The id of the tournament you want to retrieve data about.
     * @param {string} id The id of the requested match.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerMatchesApi
     */
    public tournamentsTournamentIdMatchesIdGet(tournamentId: string, id: string, options?: AxiosRequestConfig) {
        return OrganizerMatchesApiFp(this.configuration).tournamentsTournamentIdMatchesIdGet(tournamentId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates information and detailed outcome of a match.
     * @summary Update information and outcome of a match.
     * @param {string} tournamentId The id of the tournament you want to retrieve data about.
     * @param {string} id The id of the requested match.
     * @param {MatchUpdate} [matchUpdate] Update data
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerMatchesApi
     */
    public tournamentsTournamentIdMatchesIdPatch(tournamentId: string, id: string, matchUpdate?: MatchUpdate, options?: AxiosRequestConfig) {
        return OrganizerMatchesApiFp(this.configuration).tournamentsTournamentIdMatchesIdPatch(tournamentId, id, matchUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


