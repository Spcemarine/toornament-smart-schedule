/* tslint:disable */
/* eslint-disable */
/**
 * Tournaments
 * The Toornament platform connects your website and application with the eSports tournaments around the world.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: contact@toornament.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Tournament
 */
export interface Tournament {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof Tournament
     */
    'name': string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof Tournament
     */
    'full_name': string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof Tournament
     */
    'scheduled_date_start': string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof Tournament
     */
    'scheduled_date_end': string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof Tournament
     */
    'timezone': string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof Tournament
     */
    'public': boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof Tournament
     */
    'size': number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof Tournament
     */
    'online': boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof Tournament
     */
    'location': string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof Tournament
     */
    'country': string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof Tournament
     */
    'logo': TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof Tournament
     */
    'registration_enabled': boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset)
     * @type {string}
     * @memberof Tournament
     */
    'registration_opening_datetime': string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset)
     * @type {string}
     * @memberof Tournament
     */
    'registration_closing_datetime': string | null;
    /**
     * The unique identifier of the tournament.
     * @type {string}
     * @memberof Tournament
     */
    'id': string;
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof Tournament
     */
    'discipline': string;
    /**
     * The status of the tournament.
     * @type {string}
     * @memberof Tournament
     */
    'status': TournamentStatusEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof Tournament
     */
    'platforms': Array<TournamentPlatformsEnum>;
}

export const TournamentStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type TournamentStatusEnum = typeof TournamentStatusEnum[keyof typeof TournamentStatusEnum];
export const TournamentPlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentPlatformsEnum = typeof TournamentPlatformsEnum[keyof typeof TournamentPlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentAllOf
 */
export interface TournamentAllOf {
    /**
     * The unique identifier of the tournament.
     * @type {string}
     * @memberof TournamentAllOf
     */
    'id': string;
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof TournamentAllOf
     */
    'discipline': string;
    /**
     * The status of the tournament.
     * @type {string}
     * @memberof TournamentAllOf
     */
    'status': TournamentAllOfStatusEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof TournamentAllOf
     */
    'platforms': Array<TournamentAllOfPlatformsEnum>;
}

export const TournamentAllOfStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type TournamentAllOfStatusEnum = typeof TournamentAllOfStatusEnum[keyof typeof TournamentAllOfStatusEnum];
export const TournamentAllOfPlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentAllOfPlatformsEnum = typeof TournamentAllOfPlatformsEnum[keyof typeof TournamentAllOfPlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentBase
 */
export interface TournamentBase {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof TournamentBase
     */
    'name'?: string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof TournamentBase
     */
    'full_name'?: string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentBase
     */
    'scheduled_date_start'?: string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentBase
     */
    'scheduled_date_end'?: string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof TournamentBase
     */
    'timezone'?: string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof TournamentBase
     */
    'public'?: boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof TournamentBase
     */
    'size'?: number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof TournamentBase
     */
    'online'?: boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof TournamentBase
     */
    'location'?: string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof TournamentBase
     */
    'country'?: string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof TournamentBase
     */
    'logo'?: TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentBase
     */
    'registration_enabled'?: boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset)
     * @type {string}
     * @memberof TournamentBase
     */
    'registration_opening_datetime'?: string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset)
     * @type {string}
     * @memberof TournamentBase
     */
    'registration_closing_datetime'?: string | null;
}
/**
 * 
 * @export
 * @interface TournamentBaseLogo
 */
export interface TournamentBaseLogo {
    /**
     * URL of the small version of  the tournament logo.
     * @type {string}
     * @memberof TournamentBaseLogo
     */
    'logo_small': string;
    /**
     * URL of the medium version of  the tournament logo.
     * @type {string}
     * @memberof TournamentBaseLogo
     */
    'logo_medium': string;
    /**
     * URL of the large version of  the tournament logo.
     * @type {string}
     * @memberof TournamentBaseLogo
     */
    'logo_large': string;
    /**
     * URL of the original version of  the tournament logo.
     * @type {string}
     * @memberof TournamentBaseLogo
     */
    'original': string;
}
/**
 * 
 * @export
 * @interface TournamentCreateSingle
 */
export interface TournamentCreateSingle {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'name': string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'full_name'?: string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'scheduled_date_start'?: string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'scheduled_date_end'?: string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'timezone': string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'public'?: boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof TournamentCreateSingle
     */
    'size': number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'online'?: boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'location'?: string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'country'?: string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof TournamentCreateSingle
     */
    'logo'?: TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'registration_enabled'?: boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'registration_opening_datetime'?: string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'registration_closing_datetime'?: string | null;
    /**
     * The name of the organizer, be it an individual, group, association or company.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'organization'?: string | null;
    /**
     * The email address to contact the organizer.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'contact'?: string | null;
    /**
     * Invite URL to the tournament Discord server.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'discord'?: string | null;
    /**
     * The tournament\'s official website URL.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'website'?: string | null;
    /**
     * A description of the tournament.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'description'?: string | null;
    /**
     * The rules of the tournament.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'rules'?: string | null;
    /**
     * The prizes of the tournament.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'prize'?: string | null;
    /**
     * Whether the participant\'s match report is enabled or not.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'match_report_enabled'?: boolean;
    /**
     * The message provided by the organizer for people who want to register.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'registration_request_message'?: string | null;
    /**
     * Whether to enable the check-in or not.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'check_in_enabled'?: boolean;
    /**
     * Whether to enable the check-in for participants or not.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'check_in_participant_enabled'?: boolean;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'check_in_participant_start_datetime'?: string | null;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'check_in_participant_end_datetime'?: string | null;
    /**
     * Whether the tournament is archived or not.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'archived'?: boolean;
    /**
     * The message sent to a player when his registration is accepted.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'registration_acceptance_message'?: string | null;
    /**
     * The message sent to a player when his registration is refused.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'registration_refusal_message'?: string | null;
    /**
     * Whether custom \'terms of use\' are required.
     * @type {boolean}
     * @memberof TournamentCreateSingle
     */
    'registration_terms_enabled'?: boolean;
    /**
     * If enabled, the URL of the custom \'terms of use\'.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'registration_terms_url'?: string | null;
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'discipline': string;
    /**
     * The type of participants that play in the tournament.
     * @type {string}
     * @memberof TournamentCreateSingle
     */
    'participant_type': TournamentCreateSingleParticipantTypeEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof TournamentCreateSingle
     */
    'platforms': Array<TournamentCreateSinglePlatformsEnum>;
}

export const TournamentCreateSingleParticipantTypeEnum = {
    Team: 'team',
    Single: 'single'
} as const;

export type TournamentCreateSingleParticipantTypeEnum = typeof TournamentCreateSingleParticipantTypeEnum[keyof typeof TournamentCreateSingleParticipantTypeEnum];
export const TournamentCreateSinglePlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentCreateSinglePlatformsEnum = typeof TournamentCreateSinglePlatformsEnum[keyof typeof TournamentCreateSinglePlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentCreateSingleAllOf
 */
export interface TournamentCreateSingleAllOf {
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof TournamentCreateSingleAllOf
     */
    'discipline': string;
    /**
     * The type of participants that play in the tournament.
     * @type {string}
     * @memberof TournamentCreateSingleAllOf
     */
    'participant_type': TournamentCreateSingleAllOfParticipantTypeEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof TournamentCreateSingleAllOf
     */
    'platforms': Array<TournamentCreateSingleAllOfPlatformsEnum>;
}

export const TournamentCreateSingleAllOfParticipantTypeEnum = {
    Team: 'team',
    Single: 'single'
} as const;

export type TournamentCreateSingleAllOfParticipantTypeEnum = typeof TournamentCreateSingleAllOfParticipantTypeEnum[keyof typeof TournamentCreateSingleAllOfParticipantTypeEnum];
export const TournamentCreateSingleAllOfPlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentCreateSingleAllOfPlatformsEnum = typeof TournamentCreateSingleAllOfPlatformsEnum[keyof typeof TournamentCreateSingleAllOfPlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentCreateTeam
 */
export interface TournamentCreateTeam {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'name': string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'full_name'?: string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'scheduled_date_start'?: string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'scheduled_date_end'?: string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'timezone': string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'public'?: boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof TournamentCreateTeam
     */
    'size': number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'online'?: boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'location'?: string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'country'?: string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof TournamentCreateTeam
     */
    'logo'?: TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'registration_enabled'?: boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'registration_opening_datetime'?: string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'registration_closing_datetime'?: string | null;
    /**
     * The name of the organizer, be it an individual, group, association or company.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'organization'?: string | null;
    /**
     * The email address to contact the organizer.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'contact'?: string | null;
    /**
     * Invite URL to the tournament Discord server.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'discord'?: string | null;
    /**
     * The tournament\'s official website URL.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'website'?: string | null;
    /**
     * A description of the tournament.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'description'?: string | null;
    /**
     * The rules of the tournament.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'rules'?: string | null;
    /**
     * The prizes of the tournament.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'prize'?: string | null;
    /**
     * Whether the participant\'s match report is enabled or not.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'match_report_enabled'?: boolean;
    /**
     * The message provided by the organizer for people who want to register.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'registration_request_message'?: string | null;
    /**
     * Whether to enable the check-in or not.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'check_in_enabled'?: boolean;
    /**
     * Whether to enable the check-in for participants or not.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'check_in_participant_enabled'?: boolean;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'check_in_participant_start_datetime'?: string | null;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'check_in_participant_end_datetime'?: string | null;
    /**
     * Whether the tournament is archived or not.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'archived'?: boolean;
    /**
     * The message sent to a player when his registration is accepted.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'registration_acceptance_message'?: string | null;
    /**
     * The message sent to a player when his registration is refused.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'registration_refusal_message'?: string | null;
    /**
     * Whether custom \'terms of use\' are required.
     * @type {boolean}
     * @memberof TournamentCreateTeam
     */
    'registration_terms_enabled'?: boolean;
    /**
     * If enabled, the URL of the custom \'terms of use\'.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'registration_terms_url'?: string | null;
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'discipline': string;
    /**
     * The type of participants that play in the tournament.
     * @type {string}
     * @memberof TournamentCreateTeam
     */
    'participant_type': TournamentCreateTeamParticipantTypeEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof TournamentCreateTeam
     */
    'platforms': Array<TournamentCreateTeamPlatformsEnum>;
    /**
     * The smallest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentCreateTeam
     */
    'team_min_size'?: number;
    /**
     * The largest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentCreateTeam
     */
    'team_max_size'?: number;
}

export const TournamentCreateTeamParticipantTypeEnum = {
    Team: 'team',
    Single: 'single'
} as const;

export type TournamentCreateTeamParticipantTypeEnum = typeof TournamentCreateTeamParticipantTypeEnum[keyof typeof TournamentCreateTeamParticipantTypeEnum];
export const TournamentCreateTeamPlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentCreateTeamPlatformsEnum = typeof TournamentCreateTeamPlatformsEnum[keyof typeof TournamentCreateTeamPlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentCreateTeamAllOf
 */
export interface TournamentCreateTeamAllOf {
    /**
     * The smallest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentCreateTeamAllOf
     */
    'team_min_size'?: number;
    /**
     * The largest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentCreateTeamAllOf
     */
    'team_max_size'?: number;
}
/**
 * 
 * @export
 * @interface TournamentDetailedSingle
 */
export interface TournamentDetailedSingle {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'name': string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'full_name': string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'scheduled_date_start': string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'scheduled_date_end': string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'timezone': string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'public': boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof TournamentDetailedSingle
     */
    'size': number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'online': boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'location': string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'country': string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof TournamentDetailedSingle
     */
    'logo': TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'registration_enabled': boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'registration_opening_datetime': string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'registration_closing_datetime': string | null;
    /**
     * The name of the organizer, be it an individual, group, association or company.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'organization': string | null;
    /**
     * The email address to contact the organizer.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'contact': string | null;
    /**
     * Invite URL to the tournament Discord server.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'discord': string | null;
    /**
     * The tournament\'s official website URL.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'website': string | null;
    /**
     * A description of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'description': string | null;
    /**
     * The rules of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'rules': string | null;
    /**
     * The prizes of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'prize': string | null;
    /**
     * Whether the participant\'s match report is enabled or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'match_report_enabled': boolean;
    /**
     * The message provided by the organizer for people who want to register.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'registration_request_message': string | null;
    /**
     * Whether to enable the check-in or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'check_in_enabled': boolean;
    /**
     * Whether to enable the check-in for participants or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'check_in_participant_enabled': boolean;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'check_in_participant_start_datetime': string | null;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'check_in_participant_end_datetime': string | null;
    /**
     * Whether the tournament is archived or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'archived': boolean;
    /**
     * The message sent to a player when his registration is accepted.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'registration_acceptance_message': string | null;
    /**
     * The message sent to a player when his registration is refused.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'registration_refusal_message': string | null;
    /**
     * Whether custom \'terms of use\' are required.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'registration_terms_enabled': boolean;
    /**
     * If enabled, the URL of the custom \'terms of use\'.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'registration_terms_url': string | null;
    /**
     * The unique identifier of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'id': string;
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'discipline': string;
    /**
     * The status of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'status': TournamentDetailedSingleStatusEnum;
    /**
     * The type of participants that play in the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingle
     */
    'participant_type': TournamentDetailedSingleParticipantTypeEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof TournamentDetailedSingle
     */
    'platforms': Array<TournamentDetailedSinglePlatformsEnum>;
    /**
     * Whether the tournament is featured or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'featured': boolean;
    /**
     * Whether to notify organizers when new registrations occur or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingle
     */
    'registration_notification_enabled': boolean;
}

export const TournamentDetailedSingleStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type TournamentDetailedSingleStatusEnum = typeof TournamentDetailedSingleStatusEnum[keyof typeof TournamentDetailedSingleStatusEnum];
export const TournamentDetailedSingleParticipantTypeEnum = {
    Team: 'team',
    Single: 'single'
} as const;

export type TournamentDetailedSingleParticipantTypeEnum = typeof TournamentDetailedSingleParticipantTypeEnum[keyof typeof TournamentDetailedSingleParticipantTypeEnum];
export const TournamentDetailedSinglePlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentDetailedSinglePlatformsEnum = typeof TournamentDetailedSinglePlatformsEnum[keyof typeof TournamentDetailedSinglePlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentDetailedSingleAllOf
 */
export interface TournamentDetailedSingleAllOf {
    /**
     * The unique identifier of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingleAllOf
     */
    'id': string;
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof TournamentDetailedSingleAllOf
     */
    'discipline': string;
    /**
     * The status of the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingleAllOf
     */
    'status': TournamentDetailedSingleAllOfStatusEnum;
    /**
     * The type of participants that play in the tournament.
     * @type {string}
     * @memberof TournamentDetailedSingleAllOf
     */
    'participant_type': TournamentDetailedSingleAllOfParticipantTypeEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof TournamentDetailedSingleAllOf
     */
    'platforms': Array<TournamentDetailedSingleAllOfPlatformsEnum>;
    /**
     * Whether the tournament is featured or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingleAllOf
     */
    'featured': boolean;
    /**
     * Whether to notify organizers when new registrations occur or not.
     * @type {boolean}
     * @memberof TournamentDetailedSingleAllOf
     */
    'registration_notification_enabled': boolean;
}

export const TournamentDetailedSingleAllOfStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type TournamentDetailedSingleAllOfStatusEnum = typeof TournamentDetailedSingleAllOfStatusEnum[keyof typeof TournamentDetailedSingleAllOfStatusEnum];
export const TournamentDetailedSingleAllOfParticipantTypeEnum = {
    Team: 'team',
    Single: 'single'
} as const;

export type TournamentDetailedSingleAllOfParticipantTypeEnum = typeof TournamentDetailedSingleAllOfParticipantTypeEnum[keyof typeof TournamentDetailedSingleAllOfParticipantTypeEnum];
export const TournamentDetailedSingleAllOfPlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentDetailedSingleAllOfPlatformsEnum = typeof TournamentDetailedSingleAllOfPlatformsEnum[keyof typeof TournamentDetailedSingleAllOfPlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentDetailedTeam
 */
export interface TournamentDetailedTeam {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'name': string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'full_name': string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'scheduled_date_start': string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'scheduled_date_end': string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'timezone': string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'public': boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof TournamentDetailedTeam
     */
    'size': number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'online': boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'location': string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'country': string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof TournamentDetailedTeam
     */
    'logo': TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'registration_enabled': boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'registration_opening_datetime': string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'registration_closing_datetime': string | null;
    /**
     * The name of the organizer, be it an individual, group, association or company.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'organization': string | null;
    /**
     * The email address to contact the organizer.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'contact': string | null;
    /**
     * Invite URL to the tournament Discord server.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'discord': string | null;
    /**
     * The tournament\'s official website URL.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'website': string | null;
    /**
     * A description of the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'description': string | null;
    /**
     * The rules of the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'rules': string | null;
    /**
     * The prizes of the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'prize': string | null;
    /**
     * Whether the participant\'s match report is enabled or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'match_report_enabled': boolean;
    /**
     * The message provided by the organizer for people who want to register.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'registration_request_message': string | null;
    /**
     * Whether to enable the check-in or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'check_in_enabled': boolean;
    /**
     * Whether to enable the check-in for participants or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'check_in_participant_enabled': boolean;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'check_in_participant_start_datetime': string | null;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'check_in_participant_end_datetime': string | null;
    /**
     * Whether the tournament is archived or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'archived': boolean;
    /**
     * The message sent to a player when his registration is accepted.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'registration_acceptance_message': string | null;
    /**
     * The message sent to a player when his registration is refused.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'registration_refusal_message': string | null;
    /**
     * Whether custom \'terms of use\' are required.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'registration_terms_enabled': boolean;
    /**
     * If enabled, the URL of the custom \'terms of use\'.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'registration_terms_url': string | null;
    /**
     * The unique identifier of the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'id': string;
    /**
     * A unique identifier of the tournament’s discipline.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'discipline': string;
    /**
     * The status of the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'status': TournamentDetailedTeamStatusEnum;
    /**
     * The type of participants that play in the tournament.
     * @type {string}
     * @memberof TournamentDetailedTeam
     */
    'participant_type': TournamentDetailedTeamParticipantTypeEnum;
    /**
     * The platform on which the tournament will be played.
     * @type {Array<string>}
     * @memberof TournamentDetailedTeam
     */
    'platforms': Array<TournamentDetailedTeamPlatformsEnum>;
    /**
     * Whether the tournament is featured or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'featured': boolean;
    /**
     * Whether to notify organizers when new registrations occur or not.
     * @type {boolean}
     * @memberof TournamentDetailedTeam
     */
    'registration_notification_enabled': boolean;
    /**
     * The smallest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentDetailedTeam
     */
    'team_min_size': number;
    /**
     * The largest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentDetailedTeam
     */
    'team_max_size': number;
}

export const TournamentDetailedTeamStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type TournamentDetailedTeamStatusEnum = typeof TournamentDetailedTeamStatusEnum[keyof typeof TournamentDetailedTeamStatusEnum];
export const TournamentDetailedTeamParticipantTypeEnum = {
    Team: 'team',
    Single: 'single'
} as const;

export type TournamentDetailedTeamParticipantTypeEnum = typeof TournamentDetailedTeamParticipantTypeEnum[keyof typeof TournamentDetailedTeamParticipantTypeEnum];
export const TournamentDetailedTeamPlatformsEnum = {
    Pc: 'pc',
    Playstation4: 'playstation4',
    XboxOne: 'xbox_one',
    NintendoSwitch: 'nintendo_switch',
    Mobile: 'mobile',
    Playstation3: 'playstation3',
    Playstation2: 'playstation2',
    Playstation1: 'playstation1',
    PsVita: 'ps_vita',
    Psp: 'psp',
    Xbox360: 'xbox360',
    Xbox: 'xbox',
    WiiU: 'wii_u',
    Wii: 'wii',
    Gamecube: 'gamecube',
    Nintendo64: 'nintendo64',
    Snes: 'snes',
    Nes: 'nes',
    Dreamcast: 'dreamcast',
    Saturn: 'saturn',
    Megadrive: 'megadrive',
    MasterSystem: 'master_system',
    _3ds: '3ds',
    Ds: 'ds',
    GameBoy: 'game_boy',
    NeoGeo: 'neo_geo',
    OtherPlatform: 'other_platform',
    NotVideoGame: 'not_video_game'
} as const;

export type TournamentDetailedTeamPlatformsEnum = typeof TournamentDetailedTeamPlatformsEnum[keyof typeof TournamentDetailedTeamPlatformsEnum];

/**
 * 
 * @export
 * @interface TournamentDetailedTeamAllOf
 */
export interface TournamentDetailedTeamAllOf {
    /**
     * The smallest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentDetailedTeamAllOf
     */
    'team_min_size': number;
    /**
     * The largest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentDetailedTeamAllOf
     */
    'team_max_size': number;
}
/**
 * The tournament logo in every available format.
 * @export
 * @interface TournamentLogo
 */
export interface TournamentLogo {
    /**
     * URL of the small version of  the tournament logo.
     * @type {string}
     * @memberof TournamentLogo
     */
    'logo_small': string;
    /**
     * URL of the medium version of  the tournament logo.
     * @type {string}
     * @memberof TournamentLogo
     */
    'logo_medium': string;
    /**
     * URL of the large version of  the tournament logo.
     * @type {string}
     * @memberof TournamentLogo
     */
    'logo_large': string;
    /**
     * URL of the original version of  the tournament logo.
     * @type {string}
     * @memberof TournamentLogo
     */
    'original': string;
}
/**
 * 
 * @export
 * @interface TournamentUpdateSingle
 */
export interface TournamentUpdateSingle {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'name'?: string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'full_name'?: string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'scheduled_date_start'?: string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'scheduled_date_end'?: string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'timezone'?: string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'public'?: boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof TournamentUpdateSingle
     */
    'size'?: number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'online'?: boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'location'?: string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'country'?: string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof TournamentUpdateSingle
     */
    'logo'?: TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'registration_enabled'?: boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'registration_opening_datetime'?: string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'registration_closing_datetime'?: string | null;
    /**
     * The name of the organizer, be it an individual, group, association or company.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'organization'?: string | null;
    /**
     * The email address to contact the organizer.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'contact'?: string | null;
    /**
     * Invite URL to the tournament Discord server.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'discord'?: string | null;
    /**
     * The tournament\'s official website URL.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'website'?: string | null;
    /**
     * A description of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'description'?: string | null;
    /**
     * The rules of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'rules'?: string | null;
    /**
     * The prizes of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'prize'?: string | null;
    /**
     * Whether the participant\'s match report is enabled or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'match_report_enabled'?: boolean;
    /**
     * The message provided by the organizer for people who want to register.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'registration_request_message'?: string | null;
    /**
     * Whether to enable the check-in or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'check_in_enabled'?: boolean;
    /**
     * Whether to enable the check-in for participants or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'check_in_participant_enabled'?: boolean;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'check_in_participant_start_datetime'?: string | null;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'check_in_participant_end_datetime'?: string | null;
    /**
     * Whether the tournament is archived or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'archived'?: boolean;
    /**
     * The message sent to a player when his registration is accepted.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'registration_acceptance_message'?: string | null;
    /**
     * The message sent to a player when his registration is refused.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'registration_refusal_message'?: string | null;
    /**
     * Whether custom \'terms of use\' are required.
     * @type {boolean}
     * @memberof TournamentUpdateSingle
     */
    'registration_terms_enabled'?: boolean;
    /**
     * If enabled, the URL of the custom \'terms of use\'.
     * @type {string}
     * @memberof TournamentUpdateSingle
     */
    'registration_terms_url'?: string | null;
}
/**
 * 
 * @export
 * @interface TournamentUpdateSingleAllOf
 */
export interface TournamentUpdateSingleAllOf {
    /**
     * The name of the organizer, be it an individual, group, association or company.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'organization'?: string | null;
    /**
     * The email address to contact the organizer.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'contact'?: string | null;
    /**
     * Invite URL to the tournament Discord server.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'discord'?: string | null;
    /**
     * The tournament\'s official website URL.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'website'?: string | null;
    /**
     * A description of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'description'?: string | null;
    /**
     * The rules of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'rules'?: string | null;
    /**
     * The prizes of the tournament.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'prize'?: string | null;
    /**
     * Whether the participant\'s match report is enabled or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingleAllOf
     */
    'match_report_enabled'?: boolean;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_enabled'?: boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_opening_datetime'?: string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_closing_datetime'?: string | null;
    /**
     * The message provided by the organizer for people who want to register.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_request_message'?: string | null;
    /**
     * Whether to enable the check-in or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingleAllOf
     */
    'check_in_enabled'?: boolean;
    /**
     * Whether to enable the check-in for participants or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingleAllOf
     */
    'check_in_participant_enabled'?: boolean;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'check_in_participant_start_datetime'?: string | null;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'check_in_participant_end_datetime'?: string | null;
    /**
     * Whether the tournament is archived or not.
     * @type {boolean}
     * @memberof TournamentUpdateSingleAllOf
     */
    'archived'?: boolean;
    /**
     * The message sent to a player when his registration is accepted.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_acceptance_message'?: string | null;
    /**
     * The message sent to a player when his registration is refused.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_refusal_message'?: string | null;
    /**
     * Whether custom \'terms of use\' are required.
     * @type {boolean}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_terms_enabled'?: boolean;
    /**
     * If enabled, the URL of the custom \'terms of use\'.
     * @type {string}
     * @memberof TournamentUpdateSingleAllOf
     */
    'registration_terms_url'?: string | null;
}
/**
 * 
 * @export
 * @interface TournamentUpdateTeam
 */
export interface TournamentUpdateTeam {
    /**
     * The name of the tournament.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'name'?: string;
    /**
     * The complete name of the tournament.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'full_name'?: string | null;
    /**
     * A starting date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'scheduled_date_start'?: string | null;
    /**
     * An ending date in ISO 8601 format (only the date part, with YYYY-MM-DD pattern).
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'scheduled_date_end'?: string | null;
    /**
     * A time zone from the IANA tz database.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'timezone'?: string;
    /**
     * Whether the tournament is published or not.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'public'?: boolean;
    /**
     * The expected number of participants in the tournament.
     * @type {number}
     * @memberof TournamentUpdateTeam
     */
    'size'?: number;
    /**
     * Whether the tournament is played on internet or not.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'online'?: boolean | null;
    /**
     * The region, city, address or place of interest where the tournament is held.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'location'?: string | null;
    /**
     * The country where the tournament is played. Some codes may not be supported. (format is ISO 3166-1 alpha-2)
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'country'?: string | null;
    /**
     * 
     * @type {TournamentBaseLogo}
     * @memberof TournamentUpdateTeam
     */
    'logo'?: TournamentBaseLogo;
    /**
     * Whether the registration process is enabled.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'registration_enabled'?: boolean;
    /**
     * The opening date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'registration_opening_datetime'?: string | null;
    /**
     * The closing date of the registrations in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'registration_closing_datetime'?: string | null;
    /**
     * The name of the organizer, be it an individual, group, association or company.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'organization'?: string | null;
    /**
     * The email address to contact the organizer.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'contact'?: string | null;
    /**
     * Invite URL to the tournament Discord server.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'discord'?: string | null;
    /**
     * The tournament\'s official website URL.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'website'?: string | null;
    /**
     * A description of the tournament.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'description'?: string | null;
    /**
     * The rules of the tournament.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'rules'?: string | null;
    /**
     * The prizes of the tournament.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'prize'?: string | null;
    /**
     * Whether the participant\'s match report is enabled or not.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'match_report_enabled'?: boolean;
    /**
     * The message provided by the organizer for people who want to register.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'registration_request_message'?: string | null;
    /**
     * Whether to enable the check-in or not.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'check_in_enabled'?: boolean;
    /**
     * Whether to enable the check-in for participants or not.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'check_in_participant_enabled'?: boolean;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'check_in_participant_start_datetime'?: string | null;
    /**
     * The date and time of the participant check-in start, in RFC 3339 format (combined date, time and utc offset).
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'check_in_participant_end_datetime'?: string | null;
    /**
     * Whether the tournament is archived or not.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'archived'?: boolean;
    /**
     * The message sent to a player when his registration is accepted.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'registration_acceptance_message'?: string | null;
    /**
     * The message sent to a player when his registration is refused.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'registration_refusal_message'?: string | null;
    /**
     * Whether custom \'terms of use\' are required.
     * @type {boolean}
     * @memberof TournamentUpdateTeam
     */
    'registration_terms_enabled'?: boolean;
    /**
     * If enabled, the URL of the custom \'terms of use\'.
     * @type {string}
     * @memberof TournamentUpdateTeam
     */
    'registration_terms_url'?: string | null;
    /**
     * The smallest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentUpdateTeam
     */
    'team_min_size'?: number;
    /**
     * The largest possible team size (only if the tournament participant type is “team”).
     * @type {number}
     * @memberof TournamentUpdateTeam
     */
    'team_max_size'?: number;
}
/**
 * @type TournamentsGet201Response
 * @export
 */
export type TournamentsGet201Response = TournamentDetailedSingle | TournamentDetailedTeam;

/**
 * @type TournamentsGetRequest
 * @export
 */
export type TournamentsGetRequest = TournamentCreateSingle | TournamentCreateTeam;

/**
 * @type TournamentsIdDeleteRequest
 * @export
 */
export type TournamentsIdDeleteRequest = TournamentUpdateSingle | TournamentUpdateTeam;


/**
 * OrganizerTournamentsApi - axios parameter creator
 * @export
 */
export const OrganizerTournamentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns tournaments you organize with all organizer-specific data.
         * @summary Retrieve the tournaments you organize and have organized.
         * @param {string} range A range of requested items using the \&#39;tournaments\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {string} [disciplines] One or several disciplines to filter.
         * @param {'pending' | 'running' | 'completed'} [statuses] One or several tournament statuses to filter.
         * @param {string} [scheduledBefore] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place before or at the date.
         * @param {string} [scheduledAfter] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place after or at the date.
         * @param {string} [countries] One or several countries to filter, with format ISO 3166-1 alpha-2 country codes.
         * @param {'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game'} [platforms] One or several platforms to filter.
         * @param {0 | 1} [isOnline] Whether the tournament is played online.
         * @param {0 | 1} [archived] Whether to include archived tournaments.
         * @param {string} [customUserIdentifier] An external custom user identifier. Use the format that suits your needs.
         * @param {Array<string>} [tournamentIds] Only return tournaments for the given list of ids.
         * @param {'scheduled_asc' | 'scheduled_desc'} [sort] Sorts the collection in a particular order. \&quot;scheduled_asc\&quot; sorts the tournaments by scheduled date from the oldest to the most recent one; \&quot;scheduled_desc\&quot; sorts the tournaments by scheduled date from the most recent to the oldest one.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsGet: async (range: string, disciplines?: string, statuses?: 'pending' | 'running' | 'completed', scheduledBefore?: string, scheduledAfter?: string, countries?: string, platforms?: 'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game', isOnline?: 0 | 1, archived?: 0 | 1, customUserIdentifier?: string, tournamentIds?: Array<string>, sort?: 'scheduled_asc' | 'scheduled_desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'range' is not null or undefined
            assertParamExists('tournamentsGet', 'range', range)
            const localVarPath = `/tournaments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:view"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:view"], configuration)

            if (disciplines !== undefined) {
                localVarQueryParameter['disciplines'] = disciplines;
            }

            if (statuses !== undefined) {
                localVarQueryParameter['statuses'] = statuses;
            }

            if (scheduledBefore !== undefined) {
                localVarQueryParameter['scheduled_before'] = (scheduledBefore as any instanceof Date) ?
                    (scheduledBefore as any).toISOString().substr(0,10) :
                    scheduledBefore;
            }

            if (scheduledAfter !== undefined) {
                localVarQueryParameter['scheduled_after'] = (scheduledAfter as any instanceof Date) ?
                    (scheduledAfter as any).toISOString().substr(0,10) :
                    scheduledAfter;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (platforms !== undefined) {
                localVarQueryParameter['platforms'] = platforms;
            }

            if (isOnline !== undefined) {
                localVarQueryParameter['is_online'] = isOnline;
            }

            if (archived !== undefined) {
                localVarQueryParameter['archived'] = archived;
            }

            if (customUserIdentifier !== undefined) {
                localVarQueryParameter['custom_user_identifier'] = customUserIdentifier;
            }

            if (tournamentIds) {
                localVarQueryParameter['tournament_ids'] = tournamentIds.join(COLLECTION_FORMATS.csv);
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes your tournament identified by the given id.
         * @summary Delete one of your tournaments.
         * @param {string} id The id of the tournament.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tournamentsIdDelete', 'id', id)
            const localVarPath = `/tournaments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:delete"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:delete"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a tournament identified with the given id with all organizer-specific data.
         * @summary Retrieve a single tournament you organize.
         * @param {string} id The id of the tournament.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tournamentsIdGet', 'id', id)
            const localVarPath = `/tournaments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:view"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:view"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or several fields of one of your tournaments.
         * @summary Update one of your tournaments.
         * @param {string} id The id of the tournament.
         * @param {TournamentsIdDeleteRequest} [tournamentsIdDeleteRequest] Tournament data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdPatch: async (id: string, tournamentsIdDeleteRequest?: TournamentsIdDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tournamentsIdPatch', 'id', id)
            const localVarPath = `/tournaments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:admin"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tournamentsIdDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new tournament.
         * @summary Create a new tournament as the organizer.
         * @param {TournamentsGetRequest} [tournamentsGetRequest] Tournament data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsPost: async (tournamentsGetRequest?: TournamentsGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tournaments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:admin"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tournamentsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizerTournamentsApi - functional programming interface
 * @export
 */
export const OrganizerTournamentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizerTournamentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns tournaments you organize with all organizer-specific data.
         * @summary Retrieve the tournaments you organize and have organized.
         * @param {string} range A range of requested items using the \&#39;tournaments\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {string} [disciplines] One or several disciplines to filter.
         * @param {'pending' | 'running' | 'completed'} [statuses] One or several tournament statuses to filter.
         * @param {string} [scheduledBefore] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place before or at the date.
         * @param {string} [scheduledAfter] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place after or at the date.
         * @param {string} [countries] One or several countries to filter, with format ISO 3166-1 alpha-2 country codes.
         * @param {'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game'} [platforms] One or several platforms to filter.
         * @param {0 | 1} [isOnline] Whether the tournament is played online.
         * @param {0 | 1} [archived] Whether to include archived tournaments.
         * @param {string} [customUserIdentifier] An external custom user identifier. Use the format that suits your needs.
         * @param {Array<string>} [tournamentIds] Only return tournaments for the given list of ids.
         * @param {'scheduled_asc' | 'scheduled_desc'} [sort] Sorts the collection in a particular order. \&quot;scheduled_asc\&quot; sorts the tournaments by scheduled date from the oldest to the most recent one; \&quot;scheduled_desc\&quot; sorts the tournaments by scheduled date from the most recent to the oldest one.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsGet(range: string, disciplines?: string, statuses?: 'pending' | 'running' | 'completed', scheduledBefore?: string, scheduledAfter?: string, countries?: string, platforms?: 'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game', isOnline?: 0 | 1, archived?: 0 | 1, customUserIdentifier?: string, tournamentIds?: Array<string>, sort?: 'scheduled_asc' | 'scheduled_desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tournament>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsGet(range, disciplines, statuses, scheduledBefore, scheduledAfter, countries, platforms, isOnline, archived, customUserIdentifier, tournamentIds, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes your tournament identified by the given id.
         * @summary Delete one of your tournaments.
         * @param {string} id The id of the tournament.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a tournament identified with the given id with all organizer-specific data.
         * @summary Retrieve a single tournament you organize.
         * @param {string} id The id of the tournament.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TournamentsGet201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates one or several fields of one of your tournaments.
         * @summary Update one of your tournaments.
         * @param {string} id The id of the tournament.
         * @param {TournamentsIdDeleteRequest} [tournamentsIdDeleteRequest] Tournament data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdPatch(id: string, tournamentsIdDeleteRequest?: TournamentsIdDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TournamentsGet201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsIdPatch(id, tournamentsIdDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new tournament.
         * @summary Create a new tournament as the organizer.
         * @param {TournamentsGetRequest} [tournamentsGetRequest] Tournament data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsPost(tournamentsGetRequest?: TournamentsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TournamentsGet201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsPost(tournamentsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizerTournamentsApi - factory interface
 * @export
 */
export const OrganizerTournamentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizerTournamentsApiFp(configuration)
    return {
        /**
         * Returns tournaments you organize with all organizer-specific data.
         * @summary Retrieve the tournaments you organize and have organized.
         * @param {string} range A range of requested items using the \&#39;tournaments\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {string} [disciplines] One or several disciplines to filter.
         * @param {'pending' | 'running' | 'completed'} [statuses] One or several tournament statuses to filter.
         * @param {string} [scheduledBefore] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place before or at the date.
         * @param {string} [scheduledAfter] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place after or at the date.
         * @param {string} [countries] One or several countries to filter, with format ISO 3166-1 alpha-2 country codes.
         * @param {'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game'} [platforms] One or several platforms to filter.
         * @param {0 | 1} [isOnline] Whether the tournament is played online.
         * @param {0 | 1} [archived] Whether to include archived tournaments.
         * @param {string} [customUserIdentifier] An external custom user identifier. Use the format that suits your needs.
         * @param {Array<string>} [tournamentIds] Only return tournaments for the given list of ids.
         * @param {'scheduled_asc' | 'scheduled_desc'} [sort] Sorts the collection in a particular order. \&quot;scheduled_asc\&quot; sorts the tournaments by scheduled date from the oldest to the most recent one; \&quot;scheduled_desc\&quot; sorts the tournaments by scheduled date from the most recent to the oldest one.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsGet(range: string, disciplines?: string, statuses?: 'pending' | 'running' | 'completed', scheduledBefore?: string, scheduledAfter?: string, countries?: string, platforms?: 'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game', isOnline?: 0 | 1, archived?: 0 | 1, customUserIdentifier?: string, tournamentIds?: Array<string>, sort?: 'scheduled_asc' | 'scheduled_desc', options?: any): AxiosPromise<Array<Tournament>> {
            return localVarFp.tournamentsGet(range, disciplines, statuses, scheduledBefore, scheduledAfter, countries, platforms, isOnline, archived, customUserIdentifier, tournamentIds, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes your tournament identified by the given id.
         * @summary Delete one of your tournaments.
         * @param {string} id The id of the tournament.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.tournamentsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a tournament identified with the given id with all organizer-specific data.
         * @summary Retrieve a single tournament you organize.
         * @param {string} id The id of the tournament.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdGet(id: string, options?: any): AxiosPromise<TournamentsGet201Response> {
            return localVarFp.tournamentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or several fields of one of your tournaments.
         * @summary Update one of your tournaments.
         * @param {string} id The id of the tournament.
         * @param {TournamentsIdDeleteRequest} [tournamentsIdDeleteRequest] Tournament data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdPatch(id: string, tournamentsIdDeleteRequest?: TournamentsIdDeleteRequest, options?: any): AxiosPromise<TournamentsGet201Response> {
            return localVarFp.tournamentsIdPatch(id, tournamentsIdDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new tournament.
         * @summary Create a new tournament as the organizer.
         * @param {TournamentsGetRequest} [tournamentsGetRequest] Tournament data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsPost(tournamentsGetRequest?: TournamentsGetRequest, options?: any): AxiosPromise<TournamentsGet201Response> {
            return localVarFp.tournamentsPost(tournamentsGetRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizerTournamentsApi - object-oriented interface
 * @export
 * @class OrganizerTournamentsApi
 * @extends {BaseAPI}
 */
export class OrganizerTournamentsApi extends BaseAPI {
    /**
     * Returns tournaments you organize with all organizer-specific data.
     * @summary Retrieve the tournaments you organize and have organized.
     * @param {string} range A range of requested items using the \&#39;tournaments\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
     * @param {string} [disciplines] One or several disciplines to filter.
     * @param {'pending' | 'running' | 'completed'} [statuses] One or several tournament statuses to filter.
     * @param {string} [scheduledBefore] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place before or at the date.
     * @param {string} [scheduledAfter] An ISO 8601 date (only the date part, with YYYY-MM-DD pattern) to include all tournaments scheduled to take place after or at the date.
     * @param {string} [countries] One or several countries to filter, with format ISO 3166-1 alpha-2 country codes.
     * @param {'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game'} [platforms] One or several platforms to filter.
     * @param {0 | 1} [isOnline] Whether the tournament is played online.
     * @param {0 | 1} [archived] Whether to include archived tournaments.
     * @param {string} [customUserIdentifier] An external custom user identifier. Use the format that suits your needs.
     * @param {Array<string>} [tournamentIds] Only return tournaments for the given list of ids.
     * @param {'scheduled_asc' | 'scheduled_desc'} [sort] Sorts the collection in a particular order. \&quot;scheduled_asc\&quot; sorts the tournaments by scheduled date from the oldest to the most recent one; \&quot;scheduled_desc\&quot; sorts the tournaments by scheduled date from the most recent to the oldest one.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerTournamentsApi
     */
    public tournamentsGet(range: string, disciplines?: string, statuses?: 'pending' | 'running' | 'completed', scheduledBefore?: string, scheduledAfter?: string, countries?: string, platforms?: 'pc' | 'playstation4' | 'xbox_one' | 'nintendo_switch' | 'mobile' | 'playstation3' | 'playstation2' | 'playstation1' | 'ps_vita' | 'psp' | 'xbox360' | 'xbox' | 'wii_u' | 'wii' | 'gamecube' | 'nintendo64' | 'snes' | 'nes' | 'dreamcast' | 'saturn' | 'megadrive' | 'master_system' | '3ds' | 'ds' | 'game_boy' | 'neo_geo' | 'other_platform' | 'not_video_game', isOnline?: 0 | 1, archived?: 0 | 1, customUserIdentifier?: string, tournamentIds?: Array<string>, sort?: 'scheduled_asc' | 'scheduled_desc', options?: AxiosRequestConfig) {
        return OrganizerTournamentsApiFp(this.configuration).tournamentsGet(range, disciplines, statuses, scheduledBefore, scheduledAfter, countries, platforms, isOnline, archived, customUserIdentifier, tournamentIds, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes your tournament identified by the given id.
     * @summary Delete one of your tournaments.
     * @param {string} id The id of the tournament.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerTournamentsApi
     */
    public tournamentsIdDelete(id: string, options?: AxiosRequestConfig) {
        return OrganizerTournamentsApiFp(this.configuration).tournamentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a tournament identified with the given id with all organizer-specific data.
     * @summary Retrieve a single tournament you organize.
     * @param {string} id The id of the tournament.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerTournamentsApi
     */
    public tournamentsIdGet(id: string, options?: AxiosRequestConfig) {
        return OrganizerTournamentsApiFp(this.configuration).tournamentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or several fields of one of your tournaments.
     * @summary Update one of your tournaments.
     * @param {string} id The id of the tournament.
     * @param {TournamentsIdDeleteRequest} [tournamentsIdDeleteRequest] Tournament data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerTournamentsApi
     */
    public tournamentsIdPatch(id: string, tournamentsIdDeleteRequest?: TournamentsIdDeleteRequest, options?: AxiosRequestConfig) {
        return OrganizerTournamentsApiFp(this.configuration).tournamentsIdPatch(id, tournamentsIdDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new tournament.
     * @summary Create a new tournament as the organizer.
     * @param {TournamentsGetRequest} [tournamentsGetRequest] Tournament data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerTournamentsApi
     */
    public tournamentsPost(tournamentsGetRequest?: TournamentsGetRequest, options?: AxiosRequestConfig) {
        return OrganizerTournamentsApiFp(this.configuration).tournamentsPost(tournamentsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


