/* tslint:disable */
/* eslint-disable */
/**
 * Brackets
 * The Toornament platform connects your website and application with the eSports tournaments around the world.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: contact@toornament.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BracketNode
 */
export interface BracketNode {
    /**
     * The id of the bracket node and the match (they both share the same id).
     * @type {string}
     * @memberof BracketNode
     */
    'id': string;
    /**
     * The id of the tournament that contains this bracket node.
     * @type {string}
     * @memberof BracketNode
     */
    'tournament_id': string;
    /**
     * The id of the stage that contains this bracket node.
     * @type {string}
     * @memberof BracketNode
     */
    'stage_id': string;
    /**
     * The id of the group that contains this bracket node.
     * @type {string}
     * @memberof BracketNode
     */
    'group_id': string;
    /**
     * The id of the round that contains this bracket node.
     * @type {string}
     * @memberof BracketNode
     */
    'round_id': string;
    /**
     * The match number (a relative identifier within a round).
     * @type {number}
     * @memberof BracketNode
     */
    'number': number;
    /**
     * The match type.
     * @type {string}
     * @memberof BracketNode
     */
    'type': BracketNodeTypeEnum;
    /**
     * The status of the match.
     * @type {string}
     * @memberof BracketNode
     */
    'status': BracketNodeStatusEnum;
    /**
     * The scheduled date of the match in RFC 3339 (combined date, time and utc offset).
     * @type {string}
     * @memberof BracketNode
     */
    'scheduled_datetime': string | null;
    /**
     * The timestamp on which the match was played (a result was provided) in RFC 3339 (combined date, time and utc offset).
     * @type {string}
     * @memberof BracketNode
     */
    'played_at': string | null;
    /**
     * The depth of the node in the bracket.
     * @type {number}
     * @memberof BracketNode
     */
    'depth': number;
    /**
     * The core branch of the node in the bracket.
     * @type {string}
     * @memberof BracketNode
     */
    'branch': BracketNodeBranchEnum;
    /**
     * List of match opponents.
     * @type {Array<BracketNodeOpponent>}
     * @memberof BracketNode
     */
    'opponents': Array<BracketNodeOpponent>;
}

export const BracketNodeTypeEnum = {
    Duel: 'duel',
    Ffa: 'ffa',
    Bye: 'bye'
} as const;

export type BracketNodeTypeEnum = typeof BracketNodeTypeEnum[keyof typeof BracketNodeTypeEnum];
export const BracketNodeStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type BracketNodeStatusEnum = typeof BracketNodeStatusEnum[keyof typeof BracketNodeStatusEnum];
export const BracketNodeBranchEnum = {
    Wb: 'wb',
    Lb: 'lb',
    Gf: 'gf'
} as const;

export type BracketNodeBranchEnum = typeof BracketNodeBranchEnum[keyof typeof BracketNodeBranchEnum];

/**
 * 
 * @export
 * @interface BracketNodeOpponent
 */
export interface BracketNodeOpponent {
    /**
     * A relative identifier between 1 and the total number of participants, it is unique and determined by the seeding.
     * @type {number}
     * @memberof BracketNodeOpponent
     */
    'number': number;
    /**
     * The game result of the opponent.
     * @type {string}
     * @memberof BracketNodeOpponent
     */
    'result': BracketNodeOpponentResultEnum;
    /**
     * The rank of the participant in the ranking. Multiple participants can share the same rank if they are tied after applying all configured tiebreakers.
     * @type {number}
     * @memberof BracketNodeOpponent
     */
    'rank': number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof BracketNodeOpponent
     */
    'forfeit': boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof BracketNodeOpponent
     */
    'score': number | null;
    /**
     * The type of source of this node item.
     * @type {string}
     * @memberof BracketNodeOpponent
     */
    'source_type': BracketNodeOpponentSourceTypeEnum;
    /**
     * The id of the bracket node connected to this opponent.
     * @type {string}
     * @memberof BracketNodeOpponent
     */
    'source_node_id': string | null;
    /**
     * 
     * @type {BracketNodeOpponentParticipant}
     * @memberof BracketNodeOpponent
     */
    'participant': BracketNodeOpponentParticipant;
}

export const BracketNodeOpponentResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type BracketNodeOpponentResultEnum = typeof BracketNodeOpponentResultEnum[keyof typeof BracketNodeOpponentResultEnum];
export const BracketNodeOpponentSourceTypeEnum = {
    None: 'none',
    Winner: 'winner',
    Loser: 'loser'
} as const;

export type BracketNodeOpponentSourceTypeEnum = typeof BracketNodeOpponentSourceTypeEnum[keyof typeof BracketNodeOpponentSourceTypeEnum];

/**
 * 
 * @export
 * @interface BracketNodeOpponentParticipant
 */
export interface BracketNodeOpponentParticipant {
    /**
     * The id of the participant.
     * @type {string}
     * @memberof BracketNodeOpponentParticipant
     */
    'id': string;
    /**
     * The name of the participant.
     * @type {string}
     * @memberof BracketNodeOpponentParticipant
     */
    'name': string;
    /**
     * The values of the custom fields configured in the tournament using the machine names as keys. For more information, please read the [Custom Fields](https://developer.toornament.com/v2/core-concepts/custom-fields) documentation.
     * @type {object}
     * @memberof BracketNodeOpponentParticipant
     */
    'custom_fields': object;
}
/**
 * 
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * The id of the participant.
     * @type {string}
     * @memberof Participant
     */
    'id': string;
    /**
     * The name of the participant.
     * @type {string}
     * @memberof Participant
     */
    'name': string;
    /**
     * The values of the custom fields configured in the tournament using the machine names as keys. For more information, please read the [Custom Fields](https://developer.toornament.com/v2/core-concepts/custom-fields) documentation.
     * @type {object}
     * @memberof Participant
     */
    'custom_fields': object;
}

/**
 * OrganizerBracketNodesApi - axios parameter creator
 * @export
 */
export const OrganizerBracketNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all bracket nodes. A bracket node represents a match and some extra data.
         * @summary Retrieve bracket nodes of a stage and tournament.
         * @param {string} range A range of requested items using the \&#39;nodes\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {Array<string>} [tournamentIds] A list of tournament ids to filter.
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {Array<string>} [groupIds] A list of group ids to filter.
         * @param {Array<number>} [groupNumbers] A list of group numbers to filter.
         * @param {Array<string>} [roundIds] A list of round ids to filter.
         * @param {Array<number>} [roundNumbers] A list of round numbers to filter.
         * @param {number} [minDepth] A minimum depth to filter.
         * @param {number} [maxDepth] A maximal depth to filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bracketNodesGet: async (range: string, tournamentIds?: Array<string>, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, minDepth?: number, maxDepth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'range' is not null or undefined
            assertParamExists('bracketNodesGet', 'range', range)
            const localVarPath = `/bracket-nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (tournamentIds) {
                localVarQueryParameter['tournament_ids'] = tournamentIds.join(COLLECTION_FORMATS.csv);
            }

            if (stageIds) {
                localVarQueryParameter['stage_ids'] = stageIds.join(COLLECTION_FORMATS.csv);
            }

            if (stageNumbers) {
                localVarQueryParameter['stage_numbers'] = stageNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (groupIds) {
                localVarQueryParameter['group_ids'] = groupIds.join(COLLECTION_FORMATS.csv);
            }

            if (groupNumbers) {
                localVarQueryParameter['group_numbers'] = groupNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (roundIds) {
                localVarQueryParameter['round_ids'] = roundIds.join(COLLECTION_FORMATS.csv);
            }

            if (roundNumbers) {
                localVarQueryParameter['round_numbers'] = roundNumbers.join(COLLECTION_FORMATS.csv);
            }

            if (minDepth !== undefined) {
                localVarQueryParameter['min_depth'] = minDepth;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max_depth'] = maxDepth;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizerBracketNodesApi - functional programming interface
 * @export
 */
export const OrganizerBracketNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizerBracketNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all bracket nodes. A bracket node represents a match and some extra data.
         * @summary Retrieve bracket nodes of a stage and tournament.
         * @param {string} range A range of requested items using the \&#39;nodes\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {Array<string>} [tournamentIds] A list of tournament ids to filter.
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {Array<string>} [groupIds] A list of group ids to filter.
         * @param {Array<number>} [groupNumbers] A list of group numbers to filter.
         * @param {Array<string>} [roundIds] A list of round ids to filter.
         * @param {Array<number>} [roundNumbers] A list of round numbers to filter.
         * @param {number} [minDepth] A minimum depth to filter.
         * @param {number} [maxDepth] A maximal depth to filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bracketNodesGet(range: string, tournamentIds?: Array<string>, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, minDepth?: number, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BracketNode>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bracketNodesGet(range, tournamentIds, stageIds, stageNumbers, groupIds, groupNumbers, roundIds, roundNumbers, minDepth, maxDepth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizerBracketNodesApi - factory interface
 * @export
 */
export const OrganizerBracketNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizerBracketNodesApiFp(configuration)
    return {
        /**
         * Returns all bracket nodes. A bracket node represents a match and some extra data.
         * @summary Retrieve bracket nodes of a stage and tournament.
         * @param {string} range A range of requested items using the \&#39;nodes\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {Array<string>} [tournamentIds] A list of tournament ids to filter.
         * @param {Array<string>} [stageIds] A list of stage ids to filter.
         * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
         * @param {Array<string>} [groupIds] A list of group ids to filter.
         * @param {Array<number>} [groupNumbers] A list of group numbers to filter.
         * @param {Array<string>} [roundIds] A list of round ids to filter.
         * @param {Array<number>} [roundNumbers] A list of round numbers to filter.
         * @param {number} [minDepth] A minimum depth to filter.
         * @param {number} [maxDepth] A maximal depth to filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bracketNodesGet(range: string, tournamentIds?: Array<string>, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, minDepth?: number, maxDepth?: number, options?: any): AxiosPromise<Array<BracketNode>> {
            return localVarFp.bracketNodesGet(range, tournamentIds, stageIds, stageNumbers, groupIds, groupNumbers, roundIds, roundNumbers, minDepth, maxDepth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizerBracketNodesApi - object-oriented interface
 * @export
 * @class OrganizerBracketNodesApi
 * @extends {BaseAPI}
 */
export class OrganizerBracketNodesApi extends BaseAPI {
    /**
     * Returns all bracket nodes. A bracket node represents a match and some extra data.
     * @summary Retrieve bracket nodes of a stage and tournament.
     * @param {string} range A range of requested items using the \&#39;nodes\&#39; unit. The size of the range can not exceed 128. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
     * @param {Array<string>} [tournamentIds] A list of tournament ids to filter.
     * @param {Array<string>} [stageIds] A list of stage ids to filter.
     * @param {Array<number>} [stageNumbers] A list of stage numbers to filter.
     * @param {Array<string>} [groupIds] A list of group ids to filter.
     * @param {Array<number>} [groupNumbers] A list of group numbers to filter.
     * @param {Array<string>} [roundIds] A list of round ids to filter.
     * @param {Array<number>} [roundNumbers] A list of round numbers to filter.
     * @param {number} [minDepth] A minimum depth to filter.
     * @param {number} [maxDepth] A maximal depth to filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerBracketNodesApi
     */
    public bracketNodesGet(range: string, tournamentIds?: Array<string>, stageIds?: Array<string>, stageNumbers?: Array<number>, groupIds?: Array<string>, groupNumbers?: Array<number>, roundIds?: Array<string>, roundNumbers?: Array<number>, minDepth?: number, maxDepth?: number, options?: AxiosRequestConfig) {
        return OrganizerBracketNodesApiFp(this.configuration).bracketNodesGet(range, tournamentIds, stageIds, stageNumbers, groupIds, groupNumbers, roundIds, roundNumbers, minDepth, maxDepth, options).then((request) => request(this.axios, this.basePath));
    }
}


