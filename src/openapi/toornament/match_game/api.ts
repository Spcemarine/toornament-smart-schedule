/* tslint:disable */
/* eslint-disable */
/**
 * Match games
 * The Toornament platform connects your website and application with the eSports tournaments around the world.
 *
 * The version of the OpenAPI document: 2.1.2
 * Contact: contact@toornament.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MatchGame
 */
export interface MatchGame {
    /**
     * The status of the match game. \"Pending\" means the game has not started yet. \"Running\" means the game is ongoing. \"Completed\" means the game is over.
     * @type {string}
     * @memberof MatchGame
     */
    'status': MatchGameStatusEnum;
    /**
     * List of the opponents involved in this match-game.
     * @type {Array<MatchGameOpponentBase>}
     * @memberof MatchGame
     */
    'opponents': Array<MatchGameOpponentBase>;
    /**
     * A relative identifier between 1 and the total number of games, to identify the game within the match.
     * @type {number}
     * @memberof MatchGame
     */
    'number': number;
}

export const MatchGameStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchGameStatusEnum = typeof MatchGameStatusEnum[keyof typeof MatchGameStatusEnum];

/**
 * 
 * @export
 * @interface MatchGameAllOf
 */
export interface MatchGameAllOf {
    /**
     * A relative identifier between 1 and the total number of games, to identify the game within the match.
     * @type {number}
     * @memberof MatchGameAllOf
     */
    'number': number;
    /**
     * The status of the match game. \"Pending\" means the game has not started yet. \"Running\" means the game is ongoing. \"Completed\" means the game is over.
     * @type {string}
     * @memberof MatchGameAllOf
     */
    'status': MatchGameAllOfStatusEnum;
}

export const MatchGameAllOfStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchGameAllOfStatusEnum = typeof MatchGameAllOfStatusEnum[keyof typeof MatchGameAllOfStatusEnum];

/**
 * 
 * @export
 * @interface MatchGameBase
 */
export interface MatchGameBase {
    /**
     * The status of the game, set to NULL for an automatic update of the status.
     * @type {string}
     * @memberof MatchGameBase
     */
    'status'?: MatchGameBaseStatusEnum;
    /**
     * List of the opponents involved in this match-game.
     * @type {Array<MatchGameOpponentBase>}
     * @memberof MatchGameBase
     */
    'opponents'?: Array<MatchGameOpponentBase>;
}

export const MatchGameBaseStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchGameBaseStatusEnum = typeof MatchGameBaseStatusEnum[keyof typeof MatchGameBaseStatusEnum];

/**
 * 
 * @export
 * @interface MatchGameDetailed
 */
export interface MatchGameDetailed {
    /**
     * The status of the match game. \"Pending\" means the game has not started yet. \"Running\" means the game is ongoing. \"Completed\" means the game is over.
     * @type {string}
     * @memberof MatchGameDetailed
     */
    'status': MatchGameDetailedStatusEnum;
    /**
     * List of the opponents involved in this match-game.
     * @type {Array<MatchGameOpponentDetailed>}
     * @memberof MatchGameDetailed
     */
    'opponents': Array<MatchGameOpponentDetailed>;
    /**
     * A relative identifier between 1 and the total number of games, to identify the game within the match.
     * @type {number}
     * @memberof MatchGameDetailed
     */
    'number': number;
    /**
     * Discipline features that define the specifics of the match game.
     * @type {object}
     * @memberof MatchGameDetailed
     */
    'properties': object;
}

export const MatchGameDetailedStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchGameDetailedStatusEnum = typeof MatchGameDetailedStatusEnum[keyof typeof MatchGameDetailedStatusEnum];

/**
 * 
 * @export
 * @interface MatchGameDetailedAllOf
 */
export interface MatchGameDetailedAllOf {
    /**
     * List of the opponents involved in this match-game.
     * @type {Array<MatchGameOpponentDetailed>}
     * @memberof MatchGameDetailedAllOf
     */
    'opponents'?: Array<MatchGameOpponentDetailed>;
    /**
     * Discipline features that define the specifics of the match game.
     * @type {object}
     * @memberof MatchGameDetailedAllOf
     */
    'properties': object;
}
/**
 * 
 * @export
 * @interface MatchGameOpponent
 */
export interface MatchGameOpponent {
    /**
     * The match-game opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof MatchGameOpponent
     */
    'number': number;
    /**
     * The match-game opponent position (calculate by internal processes).
     * @type {number}
     * @memberof MatchGameOpponent
     */
    'position': number;
    /**
     * The match-game result of the opponent.
     * @type {string}
     * @memberof MatchGameOpponent
     */
    'result': MatchGameOpponentResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof MatchGameOpponent
     */
    'rank': number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof MatchGameOpponent
     */
    'forfeit': boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof MatchGameOpponent
     */
    'score': number | null;
}

export const MatchGameOpponentResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type MatchGameOpponentResultEnum = typeof MatchGameOpponentResultEnum[keyof typeof MatchGameOpponentResultEnum];

/**
 * 
 * @export
 * @interface MatchGameOpponentBase
 */
export interface MatchGameOpponentBase {
    /**
     * The match-game opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof MatchGameOpponentBase
     */
    'number'?: number;
    /**
     * The match-game opponent position (calculate by internal processes).
     * @type {number}
     * @memberof MatchGameOpponentBase
     */
    'position'?: number;
    /**
     * The match-game result of the opponent.
     * @type {string}
     * @memberof MatchGameOpponentBase
     */
    'result'?: MatchGameOpponentBaseResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof MatchGameOpponentBase
     */
    'rank'?: number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof MatchGameOpponentBase
     */
    'forfeit'?: boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof MatchGameOpponentBase
     */
    'score'?: number | null;
}

export const MatchGameOpponentBaseResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type MatchGameOpponentBaseResultEnum = typeof MatchGameOpponentBaseResultEnum[keyof typeof MatchGameOpponentBaseResultEnum];

/**
 * 
 * @export
 * @interface MatchGameOpponentDetailed
 */
export interface MatchGameOpponentDetailed {
    /**
     * The match-game opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof MatchGameOpponentDetailed
     */
    'number': number;
    /**
     * The match-game opponent position (calculate by internal processes).
     * @type {number}
     * @memberof MatchGameOpponentDetailed
     */
    'position': number;
    /**
     * The match-game result of the opponent.
     * @type {string}
     * @memberof MatchGameOpponentDetailed
     */
    'result': MatchGameOpponentDetailedResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof MatchGameOpponentDetailed
     */
    'rank': number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof MatchGameOpponentDetailed
     */
    'forfeit': boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof MatchGameOpponentDetailed
     */
    'score': number | null;
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof MatchGameOpponentDetailed
     */
    'properties': object;
}

export const MatchGameOpponentDetailedResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type MatchGameOpponentDetailedResultEnum = typeof MatchGameOpponentDetailedResultEnum[keyof typeof MatchGameOpponentDetailedResultEnum];

/**
 * 
 * @export
 * @interface MatchGameOpponentDetailedAllOf
 */
export interface MatchGameOpponentDetailedAllOf {
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof MatchGameOpponentDetailedAllOf
     */
    'properties': object;
}
/**
 * 
 * @export
 * @interface MatchGameOpponentUpdate
 */
export interface MatchGameOpponentUpdate {
    /**
     * The match-game opponent number (a relative identifier within a match).
     * @type {number}
     * @memberof MatchGameOpponentUpdate
     */
    'number'?: number;
    /**
     * The match-game opponent position (calculate by internal processes).
     * @type {number}
     * @memberof MatchGameOpponentUpdate
     */
    'position'?: number;
    /**
     * The match-game result of the opponent.
     * @type {string}
     * @memberof MatchGameOpponentUpdate
     */
    'result'?: MatchGameOpponentUpdateResultEnum;
    /**
     * The match rank of the opponent.
     * @type {number}
     * @memberof MatchGameOpponentUpdate
     */
    'rank'?: number | null;
    /**
     * Whether the opponent is forfeit.
     * @type {boolean}
     * @memberof MatchGameOpponentUpdate
     */
    'forfeit'?: boolean;
    /**
     * The score of the opponent.
     * @type {number}
     * @memberof MatchGameOpponentUpdate
     */
    'score'?: number | null;
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof MatchGameOpponentUpdate
     */
    'properties'?: object;
}

export const MatchGameOpponentUpdateResultEnum = {
    Win: 'win',
    Draw: 'draw',
    Loss: 'loss'
} as const;

export type MatchGameOpponentUpdateResultEnum = typeof MatchGameOpponentUpdateResultEnum[keyof typeof MatchGameOpponentUpdateResultEnum];

/**
 * 
 * @export
 * @interface MatchGameOpponentUpdateAllOf
 */
export interface MatchGameOpponentUpdateAllOf {
    /**
     * Features of the game played by the opponent.
     * @type {object}
     * @memberof MatchGameOpponentUpdateAllOf
     */
    'properties'?: object;
}
/**
 * 
 * @export
 * @interface MatchGameUpdate
 */
export interface MatchGameUpdate {
    /**
     * The status of the game, set to NULL for an automatic update of the status.
     * @type {string}
     * @memberof MatchGameUpdate
     */
    'status'?: MatchGameUpdateStatusEnum;
    /**
     * List of the opponents involved in this match-game.
     * @type {Array<MatchGameOpponentUpdate>}
     * @memberof MatchGameUpdate
     */
    'opponents'?: Array<MatchGameOpponentUpdate>;
    /**
     * Discipline features that define the specifics of the match game.
     * @type {object}
     * @memberof MatchGameUpdate
     */
    'properties'?: object;
}

export const MatchGameUpdateStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed'
} as const;

export type MatchGameUpdateStatusEnum = typeof MatchGameUpdateStatusEnum[keyof typeof MatchGameUpdateStatusEnum];

/**
 * 
 * @export
 * @interface MatchGameUpdateAllOf
 */
export interface MatchGameUpdateAllOf {
    /**
     * List of the opponents involved in this match-game.
     * @type {Array<MatchGameOpponentUpdate>}
     * @memberof MatchGameUpdateAllOf
     */
    'opponents'?: Array<MatchGameOpponentUpdate>;
    /**
     * Discipline features that define the specifics of the match game.
     * @type {object}
     * @memberof MatchGameUpdateAllOf
     */
    'properties'?: object;
}

/**
 * OrganizerMatchGamesApi - axios parameter creator
 * @export
 */
export const OrganizerMatchGamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the games of the given match. If the game type is \"ffa\", this list is limited to the first 4 opponents ordered by their position.
         * @summary Retrieve the games of one match.
         * @param {string} matchId The id of the match.
         * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesMatchIdGamesGet: async (matchId: string, range: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('matchesMatchIdGamesGet', 'matchId', matchId)
            // verify required parameter 'range' is not null or undefined
            assertParamExists('matchesMatchIdGamesGet', 'range', range)
            const localVarPath = `/matches/{match_id}/games`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns detailed information about one match game.
         * @summary Get detailed information about one match game.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesMatchIdGamesNumberGet: async (matchId: string, number: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('matchesMatchIdGamesNumberGet', 'matchId', matchId)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('matchesMatchIdGamesNumberGet', 'number', number)
            const localVarPath = `/matches/{match_id}/games/{number}`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Update information and outcome of a game.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {MatchGameUpdate} [matchGameUpdate] Match game data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesMatchIdGamesNumberPatch: async (matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('matchesMatchIdGamesNumberPatch', 'matchId', matchId)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('matchesMatchIdGamesNumberPatch', 'number', number)
            const localVarPath = `/matches/{match_id}/games/{number}`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchGameUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the games of the given match. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each game.
         * @summary Retrieve the games of a match.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesMatchIdGamesGet: async (tournamentId: string, matchId: string, range: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesGet', 'tournamentId', tournamentId)
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesGet', 'matchId', matchId)
            // verify required parameter 'range' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesGet', 'range', range)
            const localVarPath = `/tournaments/{tournament_id}/matches/{match_id}/games`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)))
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Retrieve a single game from a match.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesMatchIdGamesNumberGet: async (tournamentId: string, matchId: string, number: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesNumberGet', 'tournamentId', tournamentId)
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesNumberGet', 'matchId', matchId)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesNumberGet', 'number', number)
            const localVarPath = `/tournaments/{tournament_id}/matches/{match_id}/games/{number}`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)))
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Update information and outcome of a game.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {MatchGameUpdate} [matchGameUpdate] Match game data
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesMatchIdGamesNumberPatch: async (tournamentId: string, matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesNumberPatch', 'tournamentId', tournamentId)
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesNumberPatch', 'matchId', matchId)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('tournamentsTournamentIdMatchesMatchIdGamesNumberPatch', 'number', number)
            const localVarPath = `/tournaments/{tournament_id}/matches/{match_id}/games/{number}`
                .replace(`{${"tournament_id"}}`, encodeURIComponent(String(tournamentId)))
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)

            // authentication oAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2", ["organizer:result"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchGameUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizerMatchGamesApi - functional programming interface
 * @export
 */
export const OrganizerMatchGamesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizerMatchGamesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the games of the given match. If the game type is \"ffa\", this list is limited to the first 4 opponents ordered by their position.
         * @summary Retrieve the games of one match.
         * @param {string} matchId The id of the match.
         * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesMatchIdGamesGet(matchId: string, range: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchGame>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchesMatchIdGamesGet(matchId, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns detailed information about one match game.
         * @summary Get detailed information about one match game.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesMatchIdGamesNumberGet(matchId: string, number: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchGameDetailed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchesMatchIdGamesNumberGet(matchId, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Update information and outcome of a game.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {MatchGameUpdate} [matchGameUpdate] Match game data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesMatchIdGamesNumberPatch(matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchGameDetailed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchesMatchIdGamesNumberPatch(matchId, number, matchGameUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the games of the given match. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each game.
         * @summary Retrieve the games of a match.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdMatchesMatchIdGamesGet(tournamentId: string, matchId: string, range: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchGame>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdMatchesMatchIdGamesGet(tournamentId, matchId, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Retrieve a single game from a match.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdMatchesMatchIdGamesNumberGet(tournamentId: string, matchId: string, number: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchGameDetailed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdMatchesMatchIdGamesNumberGet(tournamentId, matchId, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Update information and outcome of a game.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {MatchGameUpdate} [matchGameUpdate] Match game data
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async tournamentsTournamentIdMatchesMatchIdGamesNumberPatch(tournamentId: string, matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchGameDetailed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tournamentsTournamentIdMatchesMatchIdGamesNumberPatch(tournamentId, matchId, number, matchGameUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizerMatchGamesApi - factory interface
 * @export
 */
export const OrganizerMatchGamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizerMatchGamesApiFp(configuration)
    return {
        /**
         * Returns the games of the given match. If the game type is \"ffa\", this list is limited to the first 4 opponents ordered by their position.
         * @summary Retrieve the games of one match.
         * @param {string} matchId The id of the match.
         * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesMatchIdGamesGet(matchId: string, range: string, options?: any): AxiosPromise<Array<MatchGame>> {
            return localVarFp.matchesMatchIdGamesGet(matchId, range, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns detailed information about one match game.
         * @summary Get detailed information about one match game.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesMatchIdGamesNumberGet(matchId: string, number: string, options?: any): AxiosPromise<MatchGameDetailed> {
            return localVarFp.matchesMatchIdGamesNumberGet(matchId, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Update information and outcome of a game.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {MatchGameUpdate} [matchGameUpdate] Match game data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesMatchIdGamesNumberPatch(matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options?: any): AxiosPromise<MatchGameDetailed> {
            return localVarFp.matchesMatchIdGamesNumberPatch(matchId, number, matchGameUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the games of the given match. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each game.
         * @summary Retrieve the games of a match.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesMatchIdGamesGet(tournamentId: string, matchId: string, range: string, options?: any): AxiosPromise<Array<MatchGame>> {
            return localVarFp.tournamentsTournamentIdMatchesMatchIdGamesGet(tournamentId, matchId, range, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Retrieve a single game from a match.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesMatchIdGamesNumberGet(tournamentId: string, matchId: string, number: string, options?: any): AxiosPromise<MatchGameDetailed> {
            return localVarFp.tournamentsTournamentIdMatchesMatchIdGamesNumberGet(tournamentId, matchId, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
         * @summary Update information and outcome of a game.
         * @param {string} tournamentId The id of the tournament.
         * @param {string} matchId The id of the match.
         * @param {string} number The relative identifier of the match game to retrieve.
         * @param {MatchGameUpdate} [matchGameUpdate] Match game data
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        tournamentsTournamentIdMatchesMatchIdGamesNumberPatch(tournamentId: string, matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options?: any): AxiosPromise<MatchGameDetailed> {
            return localVarFp.tournamentsTournamentIdMatchesMatchIdGamesNumberPatch(tournamentId, matchId, number, matchGameUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizerMatchGamesApi - object-oriented interface
 * @export
 * @class OrganizerMatchGamesApi
 * @extends {BaseAPI}
 */
export class OrganizerMatchGamesApi extends BaseAPI {
    /**
     * Returns the games of the given match. If the game type is \"ffa\", this list is limited to the first 4 opponents ordered by their position.
     * @summary Retrieve the games of one match.
     * @param {string} matchId The id of the match.
     * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerMatchGamesApi
     */
    public matchesMatchIdGamesGet(matchId: string, range: string, options?: AxiosRequestConfig) {
        return OrganizerMatchGamesApiFp(this.configuration).matchesMatchIdGamesGet(matchId, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns detailed information about one match game.
     * @summary Get detailed information about one match game.
     * @param {string} matchId The id of the match.
     * @param {string} number The relative identifier of the match game to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerMatchGamesApi
     */
    public matchesMatchIdGamesNumberGet(matchId: string, number: string, options?: AxiosRequestConfig) {
        return OrganizerMatchGamesApiFp(this.configuration).matchesMatchIdGamesNumberGet(matchId, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
     * @summary Update information and outcome of a game.
     * @param {string} matchId The id of the match.
     * @param {string} number The relative identifier of the match game to retrieve.
     * @param {MatchGameUpdate} [matchGameUpdate] Match game data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizerMatchGamesApi
     */
    public matchesMatchIdGamesNumberPatch(matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options?: AxiosRequestConfig) {
        return OrganizerMatchGamesApiFp(this.configuration).matchesMatchIdGamesNumberPatch(matchId, number, matchGameUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the games of the given match. If the match type is \"ffa\", only the first 4 opponents, ordered by position, are listed in each game.
     * @summary Retrieve the games of a match.
     * @param {string} tournamentId The id of the tournament.
     * @param {string} matchId The id of the match.
     * @param {string} range A range of requested items using the \&#39;games\&#39; unit. The size of the range can not exceed 50. (see [Pagination](https://developer.toornament.com/v2/overview/pagination))
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerMatchGamesApi
     */
    public tournamentsTournamentIdMatchesMatchIdGamesGet(tournamentId: string, matchId: string, range: string, options?: AxiosRequestConfig) {
        return OrganizerMatchGamesApiFp(this.configuration).tournamentsTournamentIdMatchesMatchIdGamesGet(tournamentId, matchId, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
     * @summary Retrieve a single game from a match.
     * @param {string} tournamentId The id of the tournament.
     * @param {string} matchId The id of the match.
     * @param {string} number The relative identifier of the match game to retrieve.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerMatchGamesApi
     */
    public tournamentsTournamentIdMatchesMatchIdGamesNumberGet(tournamentId: string, matchId: string, number: string, options?: AxiosRequestConfig) {
        return OrganizerMatchGamesApiFp(this.configuration).tournamentsTournamentIdMatchesMatchIdGamesNumberGet(tournamentId, matchId, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a single game of the given match. A game is limited to 2 participants in \"duel\" type, and 100 participants in \"ffa\" type.
     * @summary Update information and outcome of a game.
     * @param {string} tournamentId The id of the tournament.
     * @param {string} matchId The id of the match.
     * @param {string} number The relative identifier of the match game to retrieve.
     * @param {MatchGameUpdate} [matchGameUpdate] Match game data
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizerMatchGamesApi
     */
    public tournamentsTournamentIdMatchesMatchIdGamesNumberPatch(tournamentId: string, matchId: string, number: string, matchGameUpdate?: MatchGameUpdate, options?: AxiosRequestConfig) {
        return OrganizerMatchGamesApiFp(this.configuration).tournamentsTournamentIdMatchesMatchIdGamesNumberPatch(tournamentId, matchId, number, matchGameUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


